android.support.v4.app.ActivityCompatHoneycomb -> android.support.v4.app.a:
    void invalidateOptionsMenu(android.app.Activity) -> a
android.support.v4.app.BackStackRecord -> android.support.v4.app.b:
    android.support.v4.app.FragmentManagerImpl mManager -> a
    android.support.v4.app.BackStackRecord$Op mHead -> b
    android.support.v4.app.BackStackRecord$Op mTail -> c
    int mNumOp -> d
    int mEnterAnim -> e
    int mExitAnim -> f
    int mPopEnterAnim -> g
    int mPopExitAnim -> h
    int mTransition -> i
    int mTransitionStyle -> j
    boolean mAddToBackStack -> k
    boolean mAllowAddToBackStack -> l
    java.lang.String mName -> m
    boolean mCommitted -> n
    int mIndex -> o
    int mBreadCrumbTitleRes -> p
    java.lang.CharSequence mBreadCrumbTitleText -> q
    int mBreadCrumbShortTitleRes -> r
    java.lang.CharSequence mBreadCrumbShortTitleText -> s
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    void dump(java.lang.String,java.io.PrintWriter,boolean) -> a
    void addOp(android.support.v4.app.BackStackRecord$Op) -> a
    android.support.v4.app.FragmentTransaction add(int,android.support.v4.app.Fragment,java.lang.String) -> a
    void doAddOp(int,android.support.v4.app.Fragment,java.lang.String,int) -> a
    android.support.v4.app.FragmentTransaction detach(android.support.v4.app.Fragment) -> a
    android.support.v4.app.FragmentTransaction attach(android.support.v4.app.Fragment) -> b
    void bumpBackStackNesting(int) -> a
    int commit() -> a
    int commitAllowingStateLoss() -> b
    int commitInternal(boolean) -> a
    void run() -> run
    void popFromBackStack(boolean) -> b
    java.lang.String getName() -> c
android.support.v4.app.BackStackRecord$Op -> android.support.v4.app.c:
    android.support.v4.app.BackStackRecord$Op next -> a
    android.support.v4.app.BackStackRecord$Op prev -> b
    int cmd -> c
    android.support.v4.app.Fragment fragment -> d
    int enterAnim -> e
    int exitAnim -> f
    int popEnterAnim -> g
    int popExitAnim -> h
    java.util.ArrayList removed -> i
android.support.v4.app.BackStackState -> android.support.v4.app.BackStackState:
    int[] mOps -> a
    int mTransition -> b
    int mTransitionStyle -> c
    java.lang.String mName -> d
    int mIndex -> e
    int mBreadCrumbTitleRes -> f
    java.lang.CharSequence mBreadCrumbTitleText -> g
    int mBreadCrumbShortTitleRes -> h
    java.lang.CharSequence mBreadCrumbShortTitleText -> i
    android.os.Parcelable$Creator CREATOR -> CREATOR
    android.support.v4.app.BackStackRecord instantiate(android.support.v4.app.FragmentManagerImpl) -> a
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.BackStackState$1 -> android.support.v4.app.d:
    android.support.v4.app.BackStackState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.BackStackState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.Fragment -> android.support.v4.app.Fragment:
    java.util.HashMap sClassMap -> P
    int mState -> a
    android.view.View mAnimatingAway -> b
    int mStateAfterAnimating -> c
    android.os.Bundle mSavedFragmentState -> d
    android.util.SparseArray mSavedViewState -> e
    int mIndex -> f
    java.lang.String mWho -> g
    android.os.Bundle mArguments -> h
    android.support.v4.app.Fragment mTarget -> i
    int mTargetIndex -> j
    int mTargetRequestCode -> k
    boolean mAdded -> l
    boolean mRemoving -> m
    boolean mResumed -> n
    boolean mFromLayout -> o
    boolean mInLayout -> p
    boolean mRestored -> q
    int mBackStackNesting -> r
    android.support.v4.app.FragmentManagerImpl mFragmentManager -> s
    android.support.v4.app.FragmentActivity mActivity -> t
    android.support.v4.app.FragmentManagerImpl mChildFragmentManager -> u
    android.support.v4.app.Fragment mParentFragment -> v
    int mFragmentId -> w
    int mContainerId -> x
    java.lang.String mTag -> y
    boolean mHidden -> z
    boolean mDetached -> A
    boolean mRetainInstance -> B
    boolean mRetaining -> C
    boolean mHasMenu -> D
    boolean mMenuVisible -> E
    boolean mCalled -> F
    int mNextAnim -> G
    android.view.ViewGroup mContainer -> H
    android.view.View mView -> I
    android.view.View mInnerView -> J
    boolean mDeferStart -> K
    boolean mUserVisibleHint -> L
    android.support.v4.app.LoaderManagerImpl mLoaderManager -> M
    boolean mLoadersStarted -> N
    boolean mCheckedForLoaderManager -> O
    android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String) -> a
    android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle) -> a
    void restoreViewState(android.os.Bundle) -> a
    void setIndex(int,android.support.v4.app.Fragment) -> a
    boolean isInBackStack() -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void setArguments(android.os.Bundle) -> b
    android.os.Bundle getArguments() -> b
    android.support.v4.app.FragmentActivity getActivity() -> c
    android.content.res.Resources getResources() -> d
    boolean isAdded() -> e
    boolean isDetached() -> f
    boolean isHidden() -> g
    void onHiddenChanged(boolean) -> a
    void setMenuVisibility(boolean) -> b
    void setUserVisibleHint(boolean) -> c
    void onActivityResult(int,int,android.content.Intent) -> a
    android.view.LayoutInflater getLayoutInflater(android.os.Bundle) -> c
    void onInflate(android.app.Activity,android.util.AttributeSet,android.os.Bundle) -> a
    void onAttach(android.app.Activity) -> a
    android.view.animation.Animation onCreateAnimation(int,boolean,int) -> a
    void onCreate(android.os.Bundle) -> d
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> a
    void onViewCreated(android.view.View,android.os.Bundle) -> a
    android.view.View getView() -> h
    void onActivityCreated(android.os.Bundle) -> e
    void onViewStateRestored(android.os.Bundle) -> f
    void onStart() -> i
    void onResume() -> j
    void onSaveInstanceState(android.os.Bundle) -> g
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onPause() -> k
    void onStop() -> l
    void onLowMemory() -> onLowMemory
    void onDestroyView() -> m
    void onDestroy() -> n
    void initState() -> o
    void onDetach() -> p
    void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> a
    void onPrepareOptionsMenu(android.view.Menu) -> a
    void onDestroyOptionsMenu() -> q
    boolean onOptionsItemSelected(android.view.MenuItem) -> a
    void onOptionsMenuClosed(android.view.Menu) -> b
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    boolean onContextItemSelected(android.view.MenuItem) -> b
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    void instantiateChildFragmentManager() -> r
    void performCreate(android.os.Bundle) -> h
    android.view.View performCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> b
    void performActivityCreated(android.os.Bundle) -> i
    void performStart() -> s
    void performResume() -> t
    void performConfigurationChanged(android.content.res.Configuration) -> a
    void performLowMemory() -> u
    boolean performCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> b
    boolean performPrepareOptionsMenu(android.view.Menu) -> c
    boolean performOptionsItemSelected(android.view.MenuItem) -> c
    boolean performContextItemSelected(android.view.MenuItem) -> d
    void performOptionsMenuClosed(android.view.Menu) -> d
    void performSaveInstanceState(android.os.Bundle) -> j
    void performPause() -> v
    void performStop() -> w
    void performReallyStop() -> x
    void performDestroyView() -> y
    void performDestroy() -> z
android.support.v4.app.Fragment$1 -> android.support.v4.app.e:
    android.support.v4.app.Fragment this$0 -> a
    android.view.View findViewById(int) -> a
android.support.v4.app.Fragment$InstantiationException -> android.support.v4.app.f:
android.support.v4.app.Fragment$SavedState -> android.support.v4.app.Fragment$SavedState:
    android.os.Bundle mState -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.Fragment$SavedState$1 -> android.support.v4.app.g:
    android.support.v4.app.Fragment$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.Fragment$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentActivity -> android.support.v4.app.h:
    android.os.Handler mHandler -> a
    android.support.v4.app.FragmentManagerImpl mFragments -> b
    android.support.v4.app.FragmentContainer mContainer -> c
    boolean mCreated -> d
    boolean mResumed -> e
    boolean mStopped -> f
    boolean mReallyStopped -> g
    boolean mRetaining -> h
    boolean mOptionsMenuInvalidated -> i
    boolean mCheckedForLoaderManager -> j
    boolean mLoadersStarted -> k
    java.util.HashMap mAllLoaderManagers -> l
    android.support.v4.app.LoaderManagerImpl mLoaderManager -> m
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onBackPressed() -> onBackPressed
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreatePanelMenu(int,android.view.Menu) -> onCreatePanelMenu
    android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet) -> onCreateView
    void onDestroy() -> onDestroy
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void onLowMemory() -> onLowMemory
    boolean onMenuItemSelected(int,android.view.MenuItem) -> onMenuItemSelected
    void onPanelClosed(int,android.view.Menu) -> onPanelClosed
    void onPause() -> onPause
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onResume() -> onResume
    void onPostResume() -> onPostResume
    void onResumeFragments() -> a
    boolean onPreparePanel(int,android.view.View,android.view.Menu) -> onPreparePanel
    java.lang.Object onRetainNonConfigurationInstance() -> onRetainNonConfigurationInstance
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onStart() -> onStart
    void onStop() -> onStop
    java.lang.Object onRetainCustomNonConfigurationInstance() -> b
    void supportInvalidateOptionsMenu() -> c
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> dump
    java.lang.String viewToString(android.view.View) -> a
    void dumpViewHierarchy(java.lang.String,java.io.PrintWriter,android.view.View) -> a
    void doReallyStop(boolean) -> a
    void onReallyStop() -> d
    void onAttachFragment(android.support.v4.app.Fragment) -> a
    android.support.v4.app.FragmentManager getSupportFragmentManager() -> e
    void startActivityForResult(android.content.Intent,int) -> startActivityForResult
    void invalidateSupportFragment(java.lang.String) -> a
    android.support.v4.app.LoaderManagerImpl getLoaderManager(java.lang.String,boolean,boolean) -> a
android.support.v4.app.FragmentActivity$1 -> android.support.v4.app.i:
    android.support.v4.app.FragmentActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
android.support.v4.app.FragmentActivity$2 -> android.support.v4.app.j:
    android.support.v4.app.FragmentActivity this$0 -> a
    android.view.View findViewById(int) -> a
android.support.v4.app.FragmentActivity$FragmentTag -> android.support.v4.app.k:
    int[] Fragment -> a
android.support.v4.app.FragmentActivity$NonConfigurationInstances -> android.support.v4.app.l:
    java.lang.Object activity -> a
    java.lang.Object custom -> b
    java.util.HashMap children -> c
    java.util.ArrayList fragments -> d
    java.util.HashMap loaders -> e
android.support.v4.app.FragmentContainer -> android.support.v4.app.m:
    android.view.View findViewById(int) -> a
android.support.v4.app.FragmentManager -> android.support.v4.app.n:
    android.support.v4.app.FragmentTransaction beginTransaction() -> a
    boolean executePendingTransactions() -> b
    android.support.v4.app.Fragment findFragmentByTag(java.lang.String) -> a
android.support.v4.app.FragmentManager$OnBackStackChangedListener -> android.support.v4.app.o:
    void onBackStackChanged() -> a
android.support.v4.app.FragmentManagerImpl -> android.support.v4.app.p:
    boolean DEBUG -> a
    boolean HONEYCOMB -> b
    java.util.ArrayList mPendingActions -> c
    java.lang.Runnable[] mTmpActions -> d
    boolean mExecutingActions -> e
    java.util.ArrayList mActive -> f
    java.util.ArrayList mAdded -> g
    java.util.ArrayList mAvailIndices -> h
    java.util.ArrayList mBackStack -> i
    java.util.ArrayList mCreatedMenus -> j
    java.util.ArrayList mBackStackIndices -> k
    java.util.ArrayList mAvailBackStackIndices -> l
    java.util.ArrayList mBackStackChangeListeners -> m
    int mCurState -> n
    android.support.v4.app.FragmentActivity mActivity -> o
    android.support.v4.app.FragmentContainer mContainer -> p
    android.support.v4.app.Fragment mParent -> q
    boolean mNeedMenuInvalidate -> r
    boolean mStateSaved -> s
    boolean mDestroyed -> t
    java.lang.String mNoTransactionsBecause -> u
    boolean mHavePendingDeferredStart -> v
    android.os.Bundle mStateBundle -> w
    android.util.SparseArray mStateArray -> x
    java.lang.Runnable mExecCommit -> y
    android.view.animation.Interpolator DECELERATE_QUINT -> z
    android.view.animation.Interpolator DECELERATE_CUBIC -> A
    android.view.animation.Interpolator ACCELERATE_QUINT -> B
    android.view.animation.Interpolator ACCELERATE_CUBIC -> C
    void throwException(java.lang.RuntimeException) -> a
    android.support.v4.app.FragmentTransaction beginTransaction() -> a
    boolean executePendingTransactions() -> b
    boolean popBackStackImmediate() -> c
    void putFragment(android.os.Bundle,java.lang.String,android.support.v4.app.Fragment) -> a
    android.support.v4.app.Fragment getFragment(android.os.Bundle,java.lang.String) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    android.view.animation.Animation makeOpenCloseAnimation(android.content.Context,float,float,float,float) -> a
    android.view.animation.Animation makeFadeAnimation(android.content.Context,float,float) -> a
    android.view.animation.Animation loadAnimation(android.support.v4.app.Fragment,int,boolean,int) -> a
    void performPendingDeferredStart(android.support.v4.app.Fragment) -> a
    void moveToState(android.support.v4.app.Fragment,int,int,int,boolean) -> a
    void moveToState(android.support.v4.app.Fragment) -> b
    void moveToState(int,boolean) -> a
    void moveToState(int,int,int,boolean) -> a
    void startPendingDeferredFragments() -> d
    void makeActive(android.support.v4.app.Fragment) -> c
    void makeInactive(android.support.v4.app.Fragment) -> d
    void addFragment(android.support.v4.app.Fragment,boolean) -> a
    void removeFragment(android.support.v4.app.Fragment,int,int) -> a
    void hideFragment(android.support.v4.app.Fragment,int,int) -> b
    void showFragment(android.support.v4.app.Fragment,int,int) -> c
    void detachFragment(android.support.v4.app.Fragment,int,int) -> d
    void attachFragment(android.support.v4.app.Fragment,int,int) -> e
    android.support.v4.app.Fragment findFragmentById(int) -> a
    android.support.v4.app.Fragment findFragmentByTag(java.lang.String) -> a
    void checkStateLoss() -> t
    void enqueueAction(java.lang.Runnable,boolean) -> a
    int allocBackStackIndex(android.support.v4.app.BackStackRecord) -> a
    void setBackStackIndex(int,android.support.v4.app.BackStackRecord) -> a
    void freeBackStackIndex(int) -> b
    boolean execPendingActions() -> e
    void reportBackStackChanged() -> f
    void addBackStackState(android.support.v4.app.BackStackRecord) -> b
    boolean popBackStackState(android.os.Handler,java.lang.String,int,int) -> a
    java.util.ArrayList retainNonConfig() -> g
    void saveFragmentViewState(android.support.v4.app.Fragment) -> e
    android.os.Bundle saveFragmentBasicState(android.support.v4.app.Fragment) -> f
    android.os.Parcelable saveAllState() -> h
    void restoreAllState(android.os.Parcelable,java.util.ArrayList) -> a
    void attachActivity(android.support.v4.app.FragmentActivity,android.support.v4.app.FragmentContainer,android.support.v4.app.Fragment) -> a
    void noteStateNotSaved() -> i
    void dispatchCreate() -> j
    void dispatchActivityCreated() -> k
    void dispatchStart() -> l
    void dispatchResume() -> m
    void dispatchPause() -> n
    void dispatchStop() -> o
    void dispatchReallyStop() -> p
    void dispatchDestroyView() -> q
    void dispatchDestroy() -> r
    void dispatchConfigurationChanged(android.content.res.Configuration) -> a
    void dispatchLowMemory() -> s
    boolean dispatchCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> a
    boolean dispatchPrepareOptionsMenu(android.view.Menu) -> a
    boolean dispatchOptionsItemSelected(android.view.MenuItem) -> a
    boolean dispatchContextItemSelected(android.view.MenuItem) -> b
    void dispatchOptionsMenuClosed(android.view.Menu) -> b
    int reverseTransit(int) -> c
    int transitToStyleIndex(int,boolean) -> b
android.support.v4.app.FragmentManagerImpl$1 -> android.support.v4.app.q:
    android.support.v4.app.FragmentManagerImpl this$0 -> a
    void run() -> run
android.support.v4.app.FragmentManagerImpl$5 -> android.support.v4.app.r:
    android.support.v4.app.Fragment val$fragment -> a
    android.support.v4.app.FragmentManagerImpl this$0 -> b
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
android.support.v4.app.FragmentManagerState -> android.support.v4.app.FragmentManagerState:
    android.support.v4.app.FragmentState[] mActive -> a
    int[] mAdded -> b
    android.support.v4.app.BackStackState[] mBackStack -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.FragmentManagerState$1 -> android.support.v4.app.s:
    android.support.v4.app.FragmentManagerState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentManagerState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentPagerAdapter -> android.support.v4.app.t:
    android.support.v4.app.FragmentManager mFragmentManager -> a
    android.support.v4.app.FragmentTransaction mCurTransaction -> b
    android.support.v4.app.Fragment mCurrentPrimaryItem -> c
    android.support.v4.app.Fragment getItem(int) -> a
    void startUpdate(android.view.ViewGroup) -> a
    java.lang.Object instantiateItem(android.view.ViewGroup,int) -> a
    void destroyItem(android.view.ViewGroup,int,java.lang.Object) -> a
    void setPrimaryItem(android.view.ViewGroup,int,java.lang.Object) -> b
    void finishUpdate(android.view.ViewGroup) -> b
    boolean isViewFromObject(android.view.View,java.lang.Object) -> a
    android.os.Parcelable saveState() -> a
    void restoreState(android.os.Parcelable,java.lang.ClassLoader) -> a
    long getItemId(int) -> b
    java.lang.String makeFragmentName(int,long) -> a
android.support.v4.app.FragmentState -> android.support.v4.app.FragmentState:
    java.lang.String mClassName -> a
    int mIndex -> b
    boolean mFromLayout -> c
    int mFragmentId -> d
    int mContainerId -> e
    java.lang.String mTag -> f
    boolean mRetainInstance -> g
    boolean mDetached -> h
    android.os.Bundle mArguments -> i
    android.os.Bundle mSavedFragmentState -> j
    android.support.v4.app.Fragment mInstance -> k
    android.os.Parcelable$Creator CREATOR -> CREATOR
    android.support.v4.app.Fragment instantiate(android.support.v4.app.FragmentActivity,android.support.v4.app.Fragment) -> a
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.FragmentState$1 -> android.support.v4.app.u:
    android.support.v4.app.FragmentState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentTabHost -> android.support.v4.app.FragmentTabHost:
    java.util.ArrayList mTabs -> a
    android.content.Context mContext -> b
    android.support.v4.app.FragmentManager mFragmentManager -> c
    int mContainerId -> d
    android.widget.TabHost$OnTabChangeListener mOnTabChangeListener -> e
    android.support.v4.app.FragmentTabHost$TabInfo mLastTab -> f
    boolean mAttached -> g
    void setup() -> setup
    void setOnTabChangedListener(android.widget.TabHost$OnTabChangeListener) -> setOnTabChangedListener
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void onTabChanged(java.lang.String) -> onTabChanged
    android.support.v4.app.FragmentTransaction doTabChanged(java.lang.String,android.support.v4.app.FragmentTransaction) -> a
android.support.v4.app.FragmentTabHost$1 -> android.support.v4.app.v:
android.support.v4.app.FragmentTabHost$SavedState -> android.support.v4.app.FragmentTabHost$SavedState:
    java.lang.String curTab -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
android.support.v4.app.FragmentTabHost$SavedState$1 -> android.support.v4.app.w:
    android.support.v4.app.FragmentTabHost$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentTabHost$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentTabHost$TabInfo -> android.support.v4.app.x:
    java.lang.String tag -> a
    java.lang.Class clss -> b
    android.os.Bundle args -> c
    android.support.v4.app.Fragment fragment -> d
    android.support.v4.app.Fragment access$102(android.support.v4.app.FragmentTabHost$TabInfo,android.support.v4.app.Fragment) -> a
    android.support.v4.app.Fragment access$100(android.support.v4.app.FragmentTabHost$TabInfo) -> a
    java.lang.String access$200(android.support.v4.app.FragmentTabHost$TabInfo) -> b
    java.lang.Class access$300(android.support.v4.app.FragmentTabHost$TabInfo) -> c
    android.os.Bundle access$400(android.support.v4.app.FragmentTabHost$TabInfo) -> d
android.support.v4.app.FragmentTransaction -> android.support.v4.app.y:
    android.support.v4.app.FragmentTransaction add(int,android.support.v4.app.Fragment,java.lang.String) -> a
    android.support.v4.app.FragmentTransaction detach(android.support.v4.app.Fragment) -> a
    android.support.v4.app.FragmentTransaction attach(android.support.v4.app.Fragment) -> b
    int commit() -> a
    int commitAllowingStateLoss() -> b
android.support.v4.app.LoaderManager -> android.support.v4.app.z:
    boolean hasRunningLoaders() -> a
android.support.v4.app.LoaderManager$LoaderCallbacks -> android.support.v4.app.aa:
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
    void onLoaderReset(android.support.v4.content.Loader) -> a
android.support.v4.app.LoaderManagerImpl -> android.support.v4.app.ab:
    boolean DEBUG -> a
    android.support.v4.util.SparseArrayCompat mLoaders -> b
    android.support.v4.util.SparseArrayCompat mInactiveLoaders -> c
    java.lang.String mWho -> d
    android.support.v4.app.FragmentActivity mActivity -> e
    boolean mStarted -> f
    boolean mRetaining -> g
    void updateActivity(android.support.v4.app.FragmentActivity) -> a
    void doStart() -> b
    void doStop() -> c
    void doRetain() -> d
    void finishRetain() -> e
    void doReportNextStart() -> f
    void doReportStart() -> g
    void doDestroy() -> h
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    boolean hasRunningLoaders() -> a
android.support.v4.app.LoaderManagerImpl$LoaderInfo -> android.support.v4.app.ac:
    int mId -> a
    android.os.Bundle mArgs -> b
    android.support.v4.app.LoaderManager$LoaderCallbacks mCallbacks -> c
    android.support.v4.content.Loader mLoader -> d
    boolean mHaveData -> e
    boolean mDeliveredData -> f
    java.lang.Object mData -> g
    boolean mStarted -> h
    boolean mRetaining -> i
    boolean mRetainingStarted -> j
    boolean mReportNextStart -> k
    boolean mDestroyed -> l
    boolean mListenerRegistered -> m
    android.support.v4.app.LoaderManagerImpl$LoaderInfo mPendingLoader -> n
    android.support.v4.app.LoaderManagerImpl this$0 -> o
    void start() -> a
    void retain() -> b
    void finishRetain() -> c
    void reportStart() -> d
    void stop() -> e
    void destroy() -> f
    void callOnLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
android.support.v4.app.NoSaveStateFrameLayout -> android.support.v4.app.ad:
    android.view.ViewGroup wrap(android.view.View) -> a
    void dispatchSaveInstanceState(android.util.SparseArray) -> dispatchSaveInstanceState
    void dispatchRestoreInstanceState(android.util.SparseArray) -> dispatchRestoreInstanceState
android.support.v4.app.SuperNotCalledException -> android.support.v4.app.ae:
android.support.v4.content.Loader -> android.support.v4.a.a:
    int mId -> a
    android.support.v4.content.Loader$OnLoadCompleteListener mListener -> b
    boolean mStarted -> c
    boolean mAbandoned -> d
    boolean mReset -> e
    boolean mContentChanged -> f
    void registerListener(int,android.support.v4.content.Loader$OnLoadCompleteListener) -> a
    void unregisterListener(android.support.v4.content.Loader$OnLoadCompleteListener) -> a
    void startLoading() -> a
    void onStartLoading() -> b
    void stopLoading() -> c
    void onStopLoading() -> d
    void reset() -> e
    void onReset() -> f
    java.lang.String dataToString(java.lang.Object) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
android.support.v4.content.Loader$OnLoadCompleteListener -> android.support.v4.a.b:
android.support.v4.os.ParcelableCompat -> android.support.v4.b.a:
    android.os.Parcelable$Creator newCreator(android.support.v4.os.ParcelableCompatCreatorCallbacks) -> a
android.support.v4.os.ParcelableCompat$CompatCreator -> android.support.v4.b.b:
    android.support.v4.os.ParcelableCompatCreatorCallbacks mCallbacks -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
android.support.v4.os.ParcelableCompatCreatorCallbacks -> android.support.v4.b.c:
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> a
    java.lang.Object[] newArray(int) -> a
android.support.v4.os.ParcelableCompatCreatorHoneycombMR2 -> android.support.v4.b.d:
    android.support.v4.os.ParcelableCompatCreatorCallbacks mCallbacks -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
android.support.v4.os.ParcelableCompatCreatorHoneycombMR2Stub -> android.support.v4.b.e:
    android.os.Parcelable$Creator instantiate(android.support.v4.os.ParcelableCompatCreatorCallbacks) -> a
android.support.v4.util.DebugUtils -> android.support.v4.c.a:
    void buildShortClassTag(java.lang.Object,java.lang.StringBuilder) -> a
android.support.v4.util.LogWriter -> android.support.v4.c.b:
    java.lang.String mTag -> a
    java.lang.StringBuilder mBuilder -> b
    void close() -> close
    void flush() -> flush
    void write(char[],int,int) -> write
    void flushBuilder() -> a
android.support.v4.util.SparseArrayCompat -> android.support.v4.c.c:
    java.lang.Object DELETED -> a
    boolean mGarbage -> b
    int[] mKeys -> c
    java.lang.Object[] mValues -> d
    int mSize -> e
    void gc() -> c
    int size() -> a
    int keyAt(int) -> a
    java.lang.Object valueAt(int) -> b
    void clear() -> b
    int idealByteArraySize(int) -> c
    int idealIntArraySize(int) -> d
android.support.v4.view.AccessibilityDelegateCompat -> android.support.v4.view.a:
    android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateImpl IMPL -> b
    java.lang.Object DEFAULT_DELEGATE -> c
    java.lang.Object mBridge -> a
    java.lang.Object getBridge() -> a
    void sendAccessibilityEvent(android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> d
    void onInitializeAccessibilityNodeInfo(android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) -> a
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(android.view.View) -> a
    boolean performAccessibilityAction(android.view.View,int,android.os.Bundle) -> a
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl -> android.support.v4.view.b:
    java.lang.Object newAccessiblityDelegateDefaultImpl() -> a
    java.lang.Object newAccessiblityDelegateBridge(android.support.v4.view.AccessibilityDelegateCompat) -> a
    boolean dispatchPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(java.lang.Object,android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) -> a
    void onPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(java.lang.Object,android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(java.lang.Object,android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> d
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl$1 -> android.support.v4.view.c:
    android.support.v4.view.AccessibilityDelegateCompat val$compat -> a
    android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl this$0 -> b
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(android.view.View,java.lang.Object) -> a
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> d
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateImpl -> android.support.v4.view.d:
    java.lang.Object newAccessiblityDelegateDefaultImpl() -> a
    java.lang.Object newAccessiblityDelegateBridge(android.support.v4.view.AccessibilityDelegateCompat) -> a
    boolean dispatchPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(java.lang.Object,android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) -> a
    void onPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(java.lang.Object,android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(java.lang.Object,android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> d
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(java.lang.Object,android.view.View) -> a
    boolean performAccessibilityAction(java.lang.Object,android.view.View,int,android.os.Bundle) -> a
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateJellyBeanImpl -> android.support.v4.view.e:
    java.lang.Object newAccessiblityDelegateBridge(android.support.v4.view.AccessibilityDelegateCompat) -> a
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(java.lang.Object,android.view.View) -> a
    boolean performAccessibilityAction(java.lang.Object,android.view.View,int,android.os.Bundle) -> a
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateJellyBeanImpl$1 -> android.support.v4.view.f:
    android.support.v4.view.AccessibilityDelegateCompat val$compat -> a
    android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateJellyBeanImpl this$0 -> b
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(android.view.View,java.lang.Object) -> a
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> d
    java.lang.Object getAccessibilityNodeProvider(android.view.View) -> a
    boolean performAccessibilityAction(android.view.View,int,android.os.Bundle) -> a
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateStubImpl -> android.support.v4.view.g:
    java.lang.Object newAccessiblityDelegateDefaultImpl() -> a
    java.lang.Object newAccessiblityDelegateBridge(android.support.v4.view.AccessibilityDelegateCompat) -> a
    boolean dispatchPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(java.lang.Object,android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) -> a
    void onPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(java.lang.Object,android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(java.lang.Object,android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> d
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(java.lang.Object,android.view.View) -> a
    boolean performAccessibilityAction(java.lang.Object,android.view.View,int,android.os.Bundle) -> a
android.support.v4.view.AccessibilityDelegateCompatIcs -> android.support.v4.view.h:
    java.lang.Object newAccessibilityDelegateDefaultImpl() -> a
    java.lang.Object newAccessibilityDelegateBridge(android.support.v4.view.AccessibilityDelegateCompatIcs$AccessibilityDelegateBridge) -> a
    boolean dispatchPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(java.lang.Object,android.view.View,java.lang.Object) -> a
    void onPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(java.lang.Object,android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(java.lang.Object,android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> d
android.support.v4.view.AccessibilityDelegateCompatIcs$1 -> android.support.v4.view.i:
    android.support.v4.view.AccessibilityDelegateCompatIcs$AccessibilityDelegateBridge val$bridge -> a
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> onInitializeAccessibilityEvent
    void onInitializeAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo) -> onInitializeAccessibilityNodeInfo
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> onPopulateAccessibilityEvent
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> onRequestSendAccessibilityEvent
    void sendAccessibilityEvent(android.view.View,int) -> sendAccessibilityEvent
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> sendAccessibilityEventUnchecked
android.support.v4.view.AccessibilityDelegateCompatIcs$AccessibilityDelegateBridge -> android.support.v4.view.j:
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(android.view.View,java.lang.Object) -> a
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> d
android.support.v4.view.AccessibilityDelegateCompatJellyBean -> android.support.v4.view.k:
    java.lang.Object newAccessibilityDelegateBridge(android.support.v4.view.AccessibilityDelegateCompatJellyBean$AccessibilityDelegateBridgeJellyBean) -> a
    java.lang.Object getAccessibilityNodeProvider(java.lang.Object,android.view.View) -> a
    boolean performAccessibilityAction(java.lang.Object,android.view.View,int,android.os.Bundle) -> a
android.support.v4.view.AccessibilityDelegateCompatJellyBean$1 -> android.support.v4.view.l:
    android.support.v4.view.AccessibilityDelegateCompatJellyBean$AccessibilityDelegateBridgeJellyBean val$bridge -> a
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> onInitializeAccessibilityEvent
    void onInitializeAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo) -> onInitializeAccessibilityNodeInfo
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> onPopulateAccessibilityEvent
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> onRequestSendAccessibilityEvent
    void sendAccessibilityEvent(android.view.View,int) -> sendAccessibilityEvent
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> sendAccessibilityEventUnchecked
    android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider(android.view.View) -> getAccessibilityNodeProvider
    boolean performAccessibilityAction(android.view.View,int,android.os.Bundle) -> performAccessibilityAction
android.support.v4.view.AccessibilityDelegateCompatJellyBean$AccessibilityDelegateBridgeJellyBean -> android.support.v4.view.m:
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(android.view.View,java.lang.Object) -> a
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> d
    java.lang.Object getAccessibilityNodeProvider(android.view.View) -> a
    boolean performAccessibilityAction(android.view.View,int,android.os.Bundle) -> a
android.support.v4.view.KeyEventCompat -> android.support.v4.view.n:
    android.support.v4.view.KeyEventCompat$KeyEventVersionImpl IMPL -> a
    boolean hasModifiers(android.view.KeyEvent,int) -> a
    boolean hasNoModifiers(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompat$BaseKeyEventVersionImpl -> android.support.v4.view.o:
    int metaStateFilterDirectionalModifiers(int,int,int,int,int) -> a
    int normalizeMetaState(int) -> a
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
android.support.v4.view.KeyEventCompat$HoneycombKeyEventVersionImpl -> android.support.v4.view.p:
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
android.support.v4.view.KeyEventCompat$KeyEventVersionImpl -> android.support.v4.view.q:
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
android.support.v4.view.KeyEventCompatHoneycomb -> android.support.v4.view.r:
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> a
android.support.v4.view.MotionEventCompat -> android.support.v4.view.s:
    android.support.v4.view.MotionEventCompat$MotionEventVersionImpl IMPL -> a
    int getActionIndex(android.view.MotionEvent) -> a
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
android.support.v4.view.MotionEventCompat$BaseMotionEventVersionImpl -> android.support.v4.view.t:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
android.support.v4.view.MotionEventCompat$EclairMotionEventVersionImpl -> android.support.v4.view.u:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
android.support.v4.view.MotionEventCompat$MotionEventVersionImpl -> android.support.v4.view.v:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
android.support.v4.view.MotionEventCompatEclair -> android.support.v4.view.w:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
android.support.v4.view.PagerAdapter -> android.support.v4.view.x:
    android.database.DataSetObservable mObservable -> a
    int getCount() -> b
    void startUpdate(android.view.ViewGroup) -> a
    java.lang.Object instantiateItem(android.view.ViewGroup,int) -> a
    void destroyItem(android.view.ViewGroup,int,java.lang.Object) -> a
    void setPrimaryItem(android.view.ViewGroup,int,java.lang.Object) -> b
    void finishUpdate(android.view.ViewGroup) -> b
    void startUpdate(android.view.View) -> a
    java.lang.Object instantiateItem(android.view.View,int) -> a
    void destroyItem(android.view.View,int,java.lang.Object) -> a
    void setPrimaryItem(android.view.View,int,java.lang.Object) -> b
    void finishUpdate(android.view.View) -> b
    boolean isViewFromObject(android.view.View,java.lang.Object) -> a
    android.os.Parcelable saveState() -> a
    void restoreState(android.os.Parcelable,java.lang.ClassLoader) -> a
    int getItemPosition(java.lang.Object) -> a
    void registerDataSetObserver(android.database.DataSetObserver) -> a
    void unregisterDataSetObserver(android.database.DataSetObserver) -> b
    float getPageWidth(int) -> c
android.support.v4.view.VelocityTrackerCompat -> android.support.v4.view.y:
    android.support.v4.view.VelocityTrackerCompat$VelocityTrackerVersionImpl IMPL -> a
    float getXVelocity(android.view.VelocityTracker,int) -> a
android.support.v4.view.VelocityTrackerCompat$BaseVelocityTrackerVersionImpl -> android.support.v4.view.z:
    float getXVelocity(android.view.VelocityTracker,int) -> a
android.support.v4.view.VelocityTrackerCompat$HoneycombVelocityTrackerVersionImpl -> android.support.v4.view.aa:
    float getXVelocity(android.view.VelocityTracker,int) -> a
android.support.v4.view.VelocityTrackerCompat$VelocityTrackerVersionImpl -> android.support.v4.view.ab:
    float getXVelocity(android.view.VelocityTracker,int) -> a
android.support.v4.view.VelocityTrackerCompatHoneycomb -> android.support.v4.view.ac:
    float getXVelocity(android.view.VelocityTracker,int) -> a
android.support.v4.view.ViewCompat -> android.support.v4.view.ad:
    android.support.v4.view.ViewCompat$ViewCompatImpl IMPL -> a
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    int getImportantForAccessibility(android.view.View) -> c
    void setImportantForAccessibility(android.view.View,int) -> b
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
android.support.v4.view.ViewCompat$BaseViewCompatImpl -> android.support.v4.view.ae:
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    long getFrameTime() -> a
    int getImportantForAccessibility(android.view.View) -> c
    void setImportantForAccessibility(android.view.View,int) -> b
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
android.support.v4.view.ViewCompat$GBViewCompatImpl -> android.support.v4.view.af:
    int getOverScrollMode(android.view.View) -> a
android.support.v4.view.ViewCompat$HCViewCompatImpl -> android.support.v4.view.ag:
    long getFrameTime() -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
android.support.v4.view.ViewCompat$ICSViewCompatImpl -> android.support.v4.view.ah:
    boolean canScrollHorizontally(android.view.View,int) -> a
    void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat) -> a
android.support.v4.view.ViewCompat$JBViewCompatImpl -> android.support.v4.view.ai:
    void postInvalidateOnAnimation(android.view.View) -> b
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    int getImportantForAccessibility(android.view.View) -> c
    void setImportantForAccessibility(android.view.View,int) -> b
android.support.v4.view.ViewCompat$JbMr1ViewCompatImpl -> android.support.v4.view.aj:
android.support.v4.view.ViewCompat$ViewCompatImpl -> android.support.v4.view.ak:
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    int getImportantForAccessibility(android.view.View) -> c
    void setImportantForAccessibility(android.view.View,int) -> b
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
android.support.v4.view.ViewCompatGingerbread -> android.support.v4.view.al:
    int getOverScrollMode(android.view.View) -> a
android.support.v4.view.ViewCompatHC -> android.support.v4.view.am:
    long getFrameTime() -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
android.support.v4.view.ViewCompatICS -> android.support.v4.view.an:
    boolean canScrollHorizontally(android.view.View,int) -> a
    void setAccessibilityDelegate(android.view.View,java.lang.Object) -> a
android.support.v4.view.ViewCompatJB -> android.support.v4.view.ao:
    void postInvalidateOnAnimation(android.view.View) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    int getImportantForAccessibility(android.view.View) -> b
    void setImportantForAccessibility(android.view.View,int) -> a
android.support.v4.view.ViewConfigurationCompat -> android.support.v4.view.ap:
    android.support.v4.view.ViewConfigurationCompat$ViewConfigurationVersionImpl IMPL -> a
    int getScaledPagingTouchSlop(android.view.ViewConfiguration) -> a
android.support.v4.view.ViewConfigurationCompat$BaseViewConfigurationVersionImpl -> android.support.v4.view.aq:
    int getScaledPagingTouchSlop(android.view.ViewConfiguration) -> a
android.support.v4.view.ViewConfigurationCompat$FroyoViewConfigurationVersionImpl -> android.support.v4.view.ar:
    int getScaledPagingTouchSlop(android.view.ViewConfiguration) -> a
android.support.v4.view.ViewConfigurationCompat$ViewConfigurationVersionImpl -> android.support.v4.view.as:
    int getScaledPagingTouchSlop(android.view.ViewConfiguration) -> a
android.support.v4.view.ViewConfigurationCompatFroyo -> android.support.v4.view.at:
    int getScaledPagingTouchSlop(android.view.ViewConfiguration) -> a
android.support.v4.view.ViewPager -> android.support.v4.view.ViewPager:
    int[] LAYOUT_ATTRS -> a
    java.util.Comparator COMPARATOR -> b
    android.view.animation.Interpolator sInterpolator -> c
    java.util.ArrayList mItems -> d
    android.support.v4.view.ViewPager$ItemInfo mTempItem -> e
    android.graphics.Rect mTempRect -> f
    android.support.v4.view.PagerAdapter mAdapter -> g
    int mCurItem -> h
    int mRestoredCurItem -> i
    android.os.Parcelable mRestoredAdapterState -> j
    java.lang.ClassLoader mRestoredClassLoader -> k
    android.widget.Scroller mScroller -> l
    android.support.v4.view.ViewPager$PagerObserver mObserver -> m
    int mPageMargin -> n
    android.graphics.drawable.Drawable mMarginDrawable -> o
    int mTopPageBounds -> p
    int mBottomPageBounds -> q
    float mFirstOffset -> r
    float mLastOffset -> s
    int mChildWidthMeasureSpec -> t
    int mChildHeightMeasureSpec -> u
    boolean mInLayout -> v
    boolean mScrollingCacheEnabled -> w
    boolean mPopulatePending -> x
    int mOffscreenPageLimit -> y
    boolean mIsBeingDragged -> z
    boolean mIsUnableToDrag -> A
    int mDefaultGutterSize -> B
    int mGutterSize -> C
    int mTouchSlop -> D
    float mLastMotionX -> E
    float mLastMotionY -> F
    float mInitialMotionX -> G
    float mInitialMotionY -> H
    int mActivePointerId -> I
    android.view.VelocityTracker mVelocityTracker -> J
    int mMinimumVelocity -> K
    int mMaximumVelocity -> L
    int mFlingDistance -> M
    int mCloseEnough -> N
    boolean mFakeDragging -> O
    android.support.v4.widget.EdgeEffectCompat mLeftEdge -> P
    android.support.v4.widget.EdgeEffectCompat mRightEdge -> Q
    boolean mFirstLayout -> R
    boolean mNeedCalculatePageOffsets -> S
    boolean mCalledSuper -> T
    int mDecorChildCount -> U
    android.support.v4.view.ViewPager$OnPageChangeListener mOnPageChangeListener -> V
    android.support.v4.view.ViewPager$OnPageChangeListener mInternalPageChangeListener -> W
    android.support.v4.view.ViewPager$OnAdapterChangeListener mAdapterChangeListener -> Z
    android.support.v4.view.ViewPager$PageTransformer mPageTransformer -> aa
    java.lang.reflect.Method mSetChildrenDrawingOrderEnabled -> ab
    int mDrawingOrder -> ac
    java.util.ArrayList mDrawingOrderedChildren -> ad
    android.support.v4.view.ViewPager$ViewPositionComparator sPositionComparator -> ae
    java.lang.Runnable mEndScrollRunnable -> af
    int mScrollState -> ag
    void initViewPager() -> a
    void onDetachedFromWindow() -> onDetachedFromWindow
    void setScrollState(int) -> setScrollState
    void setAdapter(android.support.v4.view.PagerAdapter) -> setAdapter
    void removeNonDecorViews() -> g
    android.support.v4.view.PagerAdapter getAdapter() -> getAdapter
    void setOnAdapterChangeListener(android.support.v4.view.ViewPager$OnAdapterChangeListener) -> setOnAdapterChangeListener
    void setCurrentItem(int) -> setCurrentItem
    void setCurrentItem(int,boolean) -> a
    int getCurrentItem() -> getCurrentItem
    void setCurrentItemInternal(int,boolean,boolean) -> a
    void setCurrentItemInternal(int,boolean,boolean,int) -> a
    void scrollToItem(int,boolean,int,boolean) -> a
    void setOnPageChangeListener(android.support.v4.view.ViewPager$OnPageChangeListener) -> setOnPageChangeListener
    void setChildrenDrawingOrderEnabledCompat(boolean) -> setChildrenDrawingOrderEnabledCompat
    int getChildDrawingOrder(int,int) -> getChildDrawingOrder
    int getOffscreenPageLimit() -> getOffscreenPageLimit
    void setOffscreenPageLimit(int) -> setOffscreenPageLimit
    void setPageMargin(int) -> setPageMargin
    int getPageMargin() -> getPageMargin
    void setPageMarginDrawable(android.graphics.drawable.Drawable) -> setPageMarginDrawable
    void setPageMarginDrawable(int) -> setPageMarginDrawable
    boolean verifyDrawable(android.graphics.drawable.Drawable) -> verifyDrawable
    void drawableStateChanged() -> drawableStateChanged
    float distanceInfluenceForSnapDuration(float) -> a
    void smoothScrollTo(int,int,int) -> a
    android.support.v4.view.ViewPager$ItemInfo addNewItem(int,int) -> a
    void dataSetChanged() -> b
    void populate() -> c
    void populate(int) -> a
    void calculatePageOffsets(android.support.v4.view.ViewPager$ItemInfo,int,android.support.v4.view.ViewPager$ItemInfo) -> a
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void addView(android.view.View,int,android.view.ViewGroup$LayoutParams) -> addView
    void removeView(android.view.View) -> removeView
    android.support.v4.view.ViewPager$ItemInfo infoForChild(android.view.View) -> a
    android.support.v4.view.ViewPager$ItemInfo infoForAnyChild(android.view.View) -> b
    android.support.v4.view.ViewPager$ItemInfo infoForPosition(int) -> b
    void onAttachedToWindow() -> onAttachedToWindow
    void onMeasure(int,int) -> onMeasure
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void recomputeScrollPosition(int,int,int,int) -> a
    void onLayout(boolean,int,int,int,int) -> onLayout
    void computeScroll() -> computeScroll
    boolean pageScrolled(int) -> d
    void onPageScrolled(int,float,int) -> a
    void completeScroll(boolean) -> a
    boolean isGutterDrag(float,float) -> a
    void enableLayers(boolean) -> b
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean performDrag(float) -> b
    android.support.v4.view.ViewPager$ItemInfo infoForCurrentScrollPosition() -> h
    int determineTargetPage(int,float,int,int) -> a
    void draw(android.graphics.Canvas) -> draw
    void onDraw(android.graphics.Canvas) -> onDraw
    void onSecondaryPointerUp(android.view.MotionEvent) -> a
    void endDrag() -> i
    void setScrollingCacheEnabled(boolean) -> setScrollingCacheEnabled
    boolean canScroll(android.view.View,boolean,int,int,int) -> a
    boolean dispatchKeyEvent(android.view.KeyEvent) -> dispatchKeyEvent
    boolean executeKeyEvent(android.view.KeyEvent) -> a
    boolean arrowScroll(int) -> c
    android.graphics.Rect getChildRectInPagerCoordinates(android.graphics.Rect,android.view.View) -> a
    boolean pageLeft() -> d
    boolean pageRight() -> e
    void addFocusables(java.util.ArrayList,int,int) -> addFocusables
    void addTouchables(java.util.ArrayList) -> addTouchables
    boolean onRequestFocusInDescendants(int,android.graphics.Rect) -> onRequestFocusInDescendants
    boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    void access$000(android.support.v4.view.ViewPager,int) -> a
    android.support.v4.view.PagerAdapter access$200(android.support.v4.view.ViewPager) -> a
    int access$300(android.support.v4.view.ViewPager) -> b
    int[] access$400() -> f
android.support.v4.view.ViewPager$1 -> android.support.v4.view.au:
    int compare(android.support.v4.view.ViewPager$ItemInfo,android.support.v4.view.ViewPager$ItemInfo) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
android.support.v4.view.ViewPager$2 -> android.support.v4.view.av:
    float getInterpolation(float) -> getInterpolation
android.support.v4.view.ViewPager$3 -> android.support.v4.view.aw:
    android.support.v4.view.ViewPager this$0 -> a
    void run() -> run
android.support.v4.view.ViewPager$Decor -> android.support.v4.view.ax:
android.support.v4.view.ViewPager$ItemInfo -> android.support.v4.view.ay:
    java.lang.Object object -> a
    int position -> b
    boolean scrolling -> c
    float widthFactor -> d
    float offset -> e
android.support.v4.view.ViewPager$LayoutParams -> android.support.v4.view.az:
    boolean isDecor -> a
    int gravity -> b
    float widthFactor -> c
    boolean needsMeasure -> d
    int position -> e
    int childIndex -> f
android.support.v4.view.ViewPager$MyAccessibilityDelegate -> android.support.v4.view.ba:
    android.support.v4.view.ViewPager this$0 -> b
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> d
    void onInitializeAccessibilityNodeInfo(android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) -> a
    boolean performAccessibilityAction(android.view.View,int,android.os.Bundle) -> a
android.support.v4.view.ViewPager$OnAdapterChangeListener -> android.support.v4.view.bb:
    void onAdapterChanged(android.support.v4.view.PagerAdapter,android.support.v4.view.PagerAdapter) -> a
android.support.v4.view.ViewPager$OnPageChangeListener -> android.support.v4.view.bc:
    void onPageScrolled(int,float,int) -> a
    void onPageSelected(int) -> a
    void onPageScrollStateChanged(int) -> b
android.support.v4.view.ViewPager$PageTransformer -> android.support.v4.view.bd:
    void transformPage(android.view.View,float) -> a
android.support.v4.view.ViewPager$PagerObserver -> android.support.v4.view.be:
    android.support.v4.view.ViewPager this$0 -> a
    void onChanged() -> onChanged
    void onInvalidated() -> onInvalidated
android.support.v4.view.ViewPager$SavedState -> android.support.v4.view.ViewPager$SavedState:
    int position -> a
    android.os.Parcelable adapterState -> b
    java.lang.ClassLoader loader -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
android.support.v4.view.ViewPager$SavedState$1 -> android.support.v4.view.bf:
    android.support.v4.view.ViewPager$SavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> b
    android.support.v4.view.ViewPager$SavedState[] newArray(int) -> b
    java.lang.Object[] newArray(int) -> a
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> a
android.support.v4.view.ViewPager$ViewPositionComparator -> android.support.v4.view.bg:
    int compare(android.view.View,android.view.View) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
android.support.v4.view.accessibility.AccessibilityNodeInfoCompat -> android.support.v4.view.a.a:
    android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoImpl IMPL -> a
    java.lang.Object mInfo -> b
    java.lang.Object getInfo() -> a
    void addAction(int) -> a
    void setScrollable(boolean) -> a
    void setClassName(java.lang.CharSequence) -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoIcsImpl -> android.support.v4.view.a.b:
    void addAction(java.lang.Object,int) -> a
    void setClassName(java.lang.Object,java.lang.CharSequence) -> a
    void setScrollable(java.lang.Object,boolean) -> a
android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoImpl -> android.support.v4.view.a.c:
    void addAction(java.lang.Object,int) -> a
    void setScrollable(java.lang.Object,boolean) -> a
    void setClassName(java.lang.Object,java.lang.CharSequence) -> a
android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoJellybeanImpl -> android.support.v4.view.a.d:
android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoStubImpl -> android.support.v4.view.a.e:
    void addAction(java.lang.Object,int) -> a
    void setClassName(java.lang.Object,java.lang.CharSequence) -> a
    void setScrollable(java.lang.Object,boolean) -> a
android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs -> android.support.v4.view.a.f:
    void addAction(java.lang.Object,int) -> a
    void setClassName(java.lang.Object,java.lang.CharSequence) -> a
    void setScrollable(java.lang.Object,boolean) -> a
android.support.v4.view.accessibility.AccessibilityNodeProviderCompat -> android.support.v4.view.a.g:
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderImpl IMPL -> a
    java.lang.Object mProvider -> b
    java.lang.Object getProvider() -> a
    android.support.v4.view.accessibility.AccessibilityNodeInfoCompat createAccessibilityNodeInfo(int) -> a
    boolean performAction(int,int,android.os.Bundle) -> a
    java.util.List findAccessibilityNodeInfosByText(java.lang.String,int) -> a
android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderImpl -> android.support.v4.view.a.h:
    java.lang.Object newAccessibilityNodeProviderBridge(android.support.v4.view.accessibility.AccessibilityNodeProviderCompat) -> a
android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderJellyBeanImpl -> android.support.v4.view.a.i:
    java.lang.Object newAccessibilityNodeProviderBridge(android.support.v4.view.accessibility.AccessibilityNodeProviderCompat) -> a
android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderJellyBeanImpl$1 -> android.support.v4.view.a.j:
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat val$compat -> a
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderJellyBeanImpl this$0 -> b
    boolean performAction(int,int,android.os.Bundle) -> a
    java.util.List findAccessibilityNodeInfosByText(java.lang.String,int) -> a
    java.lang.Object createAccessibilityNodeInfo(int) -> a
android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderStubImpl -> android.support.v4.view.a.k:
    java.lang.Object newAccessibilityNodeProviderBridge(android.support.v4.view.accessibility.AccessibilityNodeProviderCompat) -> a
android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean -> android.support.v4.view.a.l:
    java.lang.Object newAccessibilityNodeProviderBridge(android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$AccessibilityNodeInfoBridge) -> a
android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$1 -> android.support.v4.view.a.m:
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$AccessibilityNodeInfoBridge val$bridge -> a
    android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int) -> createAccessibilityNodeInfo
    java.util.List findAccessibilityNodeInfosByText(java.lang.String,int) -> findAccessibilityNodeInfosByText
    boolean performAction(int,int,android.os.Bundle) -> performAction
android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$AccessibilityNodeInfoBridge -> android.support.v4.view.a.n:
    java.lang.Object createAccessibilityNodeInfo(int) -> a
    boolean performAction(int,int,android.os.Bundle) -> a
    java.util.List findAccessibilityNodeInfosByText(java.lang.String,int) -> a
android.support.v4.widget.EdgeEffectCompat -> android.support.v4.d.a:
    java.lang.Object mEdgeEffect -> a
    android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl IMPL -> b
    void setSize(int,int) -> a
    boolean isFinished() -> a
    void finish() -> b
    boolean onPull(float) -> a
    boolean onRelease() -> c
    boolean draw(android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$BaseEdgeEffectImpl -> android.support.v4.d.b:
    java.lang.Object newEdgeEffect(android.content.Context) -> a
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$EdgeEffectIcsImpl -> android.support.v4.d.c:
    java.lang.Object newEdgeEffect(android.content.Context) -> a
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl -> android.support.v4.d.d:
    java.lang.Object newEdgeEffect(android.content.Context) -> a
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompatIcs -> android.support.v4.d.e:
    java.lang.Object newEdgeEffect(android.content.Context) -> a
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
com.zrh.urestaurantprivate.adapter.DishesListViewAdapter -> com.zrh.urestaurantprivate.a.a:
    com.zrh.urestaurantprivate.umenu.Upagetwo$MyHandler mHandler -> a
    java.util.ArrayList mAppList -> b
    android.view.LayoutInflater mInflater -> c
    android.content.Context mContext -> d
    java.lang.String[] keyString -> e
    int[] valueViewID -> f
    com.zrh.urestaurantprivate.adapter.DishesListViewAdapter$ViewHolder holder -> g
    java.util.Map bitmapCache -> h
    android.graphics.Bitmap bitmap1 -> i
    android.graphics.Bitmap bitmap2 -> j
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    android.graphics.Bitmap getImageThumbnail(java.lang.String,int,int) -> a
    com.zrh.urestaurantprivate.umenu.Upagetwo$MyHandler access$0(com.zrh.urestaurantprivate.adapter.DishesListViewAdapter) -> a
com.zrh.urestaurantprivate.adapter.DishesListViewAdapter$1 -> com.zrh.urestaurantprivate.a.b:
    com.zrh.urestaurantprivate.adapter.DishesListViewAdapter this$0 -> a
    int val$position -> b
    void onClick(android.view.View) -> onClick
com.zrh.urestaurantprivate.adapter.DishesListViewAdapter$2 -> com.zrh.urestaurantprivate.a.c:
    com.zrh.urestaurantprivate.adapter.DishesListViewAdapter this$0 -> a
    int val$position -> b
    void onClick(android.view.View) -> onClick
com.zrh.urestaurantprivate.adapter.DishesListViewAdapter$ViewHolder -> com.zrh.urestaurantprivate.a.d:
    android.widget.ImageView button1 -> a
    android.widget.ImageView imageview1 -> b
    android.widget.ImageView button2 -> c
    android.widget.ImageView imageview2 -> d
    android.widget.TextView tv1 -> e
    android.widget.TextView tv2 -> f
    com.zrh.urestaurantprivate.adapter.DishesListViewAdapter this$0 -> g
com.zrh.urestaurantprivate.adapter.DishesListViewAdapter$buttonListener -> com.zrh.urestaurantprivate.a.e:
    int position -> b
    com.zrh.urestaurantprivate.adapter.DishesListViewAdapter this$0 -> a
    void onClick(android.view.View) -> onClick
com.zrh.urestaurantprivate.adapter.OrderListAdapter -> com.zrh.urestaurantprivate.a.f:
    java.util.List listInfo -> a
    android.content.Context mContext -> b
    com.zrh.urestaurantprivate.adapter.OrderListAdapter$ViewHolder holder -> c
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.zrh.urestaurantprivate.adapter.OrderListAdapter$ViewHolder -> com.zrh.urestaurantprivate.a.g:
    android.widget.TextView textNo -> a
    android.widget.TextView textNum -> b
    android.widget.TextView textPrice -> c
    android.widget.TextView textTime -> d
    android.widget.TextView textPhone -> e
    com.zrh.urestaurantprivate.adapter.OrderListAdapter this$0 -> f
com.zrh.urestaurantprivate.adapter.OrdersListViewAdapter -> com.zrh.urestaurantprivate.a.h:
    com.zrh.urestaurantprivate.umenu.Upagetwo$MyHandler mHandler -> c
    int ps -> a
    int pu -> b
    java.util.ArrayList mAppList -> d
    android.view.LayoutInflater mInflater -> e
    android.content.Context mContext -> f
    java.lang.String[] keyString -> g
    int[] valueViewID -> h
    com.zrh.urestaurantprivate.adapter.OrdersListViewAdapter$ViewHolder holder -> i
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    com.zrh.urestaurantprivate.adapter.OrdersListViewAdapter$ViewHolder access$0(com.zrh.urestaurantprivate.adapter.OrdersListViewAdapter) -> a
    void access$1(com.zrh.urestaurantprivate.adapter.OrdersListViewAdapter,com.zrh.urestaurantprivate.umenu.Upagetwo$MyHandler) -> a
    com.zrh.urestaurantprivate.umenu.Upagetwo$MyHandler access$2(com.zrh.urestaurantprivate.adapter.OrdersListViewAdapter) -> b
com.zrh.urestaurantprivate.adapter.OrdersListViewAdapter$ButtonListener -> com.zrh.urestaurantprivate.a.i:
    int position -> b
    com.zrh.urestaurantprivate.adapter.OrdersListViewAdapter this$0 -> a
    void onClick(android.view.View) -> onClick
com.zrh.urestaurantprivate.adapter.OrdersListViewAdapter$ViewHolder -> com.zrh.urestaurantprivate.a.j:
    android.widget.Button button -> a
    android.widget.TextView tv1 -> b
    android.widget.TextView ornum -> c
    android.widget.TextView money -> d
    com.zrh.urestaurantprivate.adapter.OrdersListViewAdapter this$0 -> e
com.zrh.urestaurantprivate.adapter.OrdersSureListAdapter -> com.zrh.urestaurantprivate.a.k:
    com.zrh.urestaurantprivate.umenu.Upagetwo$MyHandler mHandler -> a
    java.util.ArrayList mAppList -> b
    android.view.LayoutInflater mInflater -> c
    android.content.Context mContext -> d
    java.lang.String[] keyString -> e
    int[] valueViewID -> f
    com.zrh.urestaurantprivate.adapter.OrdersSureListAdapter$ViewHolder holder -> g
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.zrh.urestaurantprivate.adapter.OrdersSureListAdapter$ViewHolder -> com.zrh.urestaurantprivate.a.l:
    android.widget.TextView tv1 -> a
    android.widget.TextView ornum -> b
    android.widget.TextView money -> c
    com.zrh.urestaurantprivate.adapter.OrdersSureListAdapter this$0 -> d
com.zrh.urestaurantprivate.bean.Advertisement -> com.zrh.urestaurantprivate.b.a:
    java.lang.String hash -> a
    java.lang.String Advertisementid -> b
    java.lang.String pic -> c
    int changeStatus -> d
    void setChangedStatus(int) -> a
    int getChangedStatus() -> a
    java.lang.String getAdvertisementid() -> b
    void setAdvertisementid(java.lang.String) -> a
    java.lang.String getPic() -> c
    void setPic(java.lang.String) -> b
    java.lang.String getHash() -> d
    void setHash(java.lang.String) -> c
    java.lang.String toString() -> toString
com.zrh.urestaurantprivate.bean.Menu -> com.zrh.urestaurantprivate.b.b:
    java.lang.String menuid -> a
    java.lang.String name -> b
    java.lang.String menu_md5 -> c
    float price -> d
    java.lang.String type -> e
    java.lang.String pic -> f
    float rebate -> g
    int state -> h
    java.lang.String description -> i
    int changeStatus -> j
    void setChangedStatus(int) -> a
    int getChangedStatus() -> a
    java.lang.String getMenuid() -> b
    void setMenuid(java.lang.String) -> a
    java.lang.String getName() -> c
    void setName(java.lang.String) -> b
    float getPrice() -> d
    void setPrice(float) -> a
    java.lang.String getType() -> e
    void setType(java.lang.String) -> c
    java.lang.String getPic() -> f
    void setPic(java.lang.String) -> d
    float getRebate() -> g
    void setRebate(float) -> b
    int getState() -> h
    void setState(int) -> b
    java.lang.String getMenu_md5() -> i
    void setMenu_md5(java.lang.String) -> e
    java.lang.String getDescription() -> j
    void setDescription(java.lang.String) -> f
    java.lang.String toString() -> toString
com.zrh.urestaurantprivate.bean.MenuCategory -> com.zrh.urestaurantprivate.b.c:
    java.lang.String category_id -> a
    java.lang.String category_name -> b
    java.lang.String category_description -> c
    java.lang.String toString() -> toString
    java.lang.String getCategory_id() -> a
    void setCategory_id(java.lang.String) -> a
    java.lang.String getCategory_name() -> b
    void setCategory_name(java.lang.String) -> b
    java.lang.String getCategory_description() -> c
    void setCategory_description(java.lang.String) -> c
com.zrh.urestaurantprivate.bean.MenuDetails -> com.zrh.urestaurantprivate.b.d:
    java.lang.String name -> a
    java.lang.String id -> b
    java.lang.String order_id -> c
    java.lang.String menu_id -> d
    int amount -> e
    double price -> f
    double discount -> g
    java.lang.String getName() -> a
    void setName(java.lang.String) -> a
    void setId(java.lang.String) -> b
    java.lang.String getOrder_id() -> b
    void setOrder_id(java.lang.String) -> c
    void setMenu_id(java.lang.String) -> d
    int getAmount() -> c
    void setAmount(int) -> a
    double getPrice() -> d
    void setPrice(double) -> a
    double getDiscount() -> e
    void setDiscount(double) -> b
com.zrh.urestaurantprivate.bean.Order -> com.zrh.urestaurantprivate.b.e:
    java.lang.String seatid -> a
    java.lang.String totalprice -> b
    java.lang.String remarks -> c
    java.lang.String tableflag -> d
    java.lang.String waiterid -> e
    java.lang.String time -> f
    java.lang.String foodtime -> g
    java.lang.String phone -> h
    void cleanAll() -> a
    java.lang.String getSeatid() -> b
    void setSeatid(java.lang.String) -> a
    java.lang.String getTotalprice() -> c
    java.lang.String getRemarks() -> d
    java.lang.String getTableflag() -> e
    void setTableflag(java.lang.String) -> b
    java.lang.String getWaiterid() -> f
    java.lang.String getTime() -> g
    java.lang.String getPhone() -> h
    java.lang.String toString() -> toString
com.zrh.urestaurantprivate.bean.OrderInfo -> com.zrh.urestaurantprivate.b.f:
    int order_status -> a
    int pay_status -> b
    int pay_ways -> c
    double orderTotalPrice -> d
    double original_price -> e
    double total_discounts -> f
    java.lang.String orderTiem -> g
    java.lang.String pay_time -> h
    java.lang.String dinner_time -> i
    java.lang.String table_id -> j
    java.lang.String customer_id -> k
    java.lang.String waiter_id -> l
    java.lang.String orderNo -> m
    java.lang.String phone -> n
    java.lang.String name -> o
    java.lang.String remarks -> p
    java.lang.String identify_code -> q
    java.lang.String getOrderNo() -> a
    void setOrderNo(java.lang.String) -> a
    double getOrderTotalPrice() -> b
    void setOrderTotalPrice(double) -> a
    java.lang.String getOrderTiem() -> c
    void setOrderTiem(java.lang.String) -> b
    int getOrder_status() -> d
    void setOrder_status(int) -> a
    void setCustomer_id(java.lang.String) -> c
    void setOriginal_price(double) -> b
    int getPay_status() -> e
    void setPay_status(int) -> b
    void setPay_ways(int) -> c
    java.lang.String getWaiter_id() -> f
    void setWaiter_id(java.lang.String) -> d
    java.lang.String getPhone() -> g
    void setPhone(java.lang.String) -> e
    void setName(java.lang.String) -> f
    java.lang.String getRemarks() -> h
    void setRemarks(java.lang.String) -> g
    void setPay_time(java.lang.String) -> h
    void setIdentify_code(java.lang.String) -> i
    java.lang.String getTable_id() -> i
    void setTable_id(java.lang.String) -> j
    void setDinner_time(java.lang.String) -> k
    void setTotal_discounts(double) -> c
com.zrh.urestaurantprivate.bean.OrderList -> com.zrh.urestaurantprivate.b.g:
    java.lang.String menuid -> a
    java.lang.String name -> b
    int amount -> c
    float price -> d
    float rebate -> e
    java.lang.String description -> f
    float getRebate() -> a
    java.lang.String getMenuid() -> b
    java.lang.String getName() -> c
    int getAmount() -> d
    void setAmount(int) -> a
    float getPrice() -> e
    java.lang.String getDescription() -> f
    java.lang.String toString() -> toString
com.zrh.urestaurantprivate.bean.ResEnvPicInfo -> com.zrh.urestaurantprivate.b.h:
    java.lang.String hash -> a
    java.lang.String enviromentid -> b
    java.lang.String pic -> c
    int changeStatus -> d
    void setChangedStatus(int) -> a
    int getChangedStatus() -> a
    java.lang.String getEnviromentid() -> b
    void setEnviromentid(java.lang.String) -> a
    java.lang.String getPic() -> c
    void setPic(java.lang.String) -> b
    java.lang.String getHash() -> d
    void setHash(java.lang.String) -> c
    java.lang.String toString() -> toString
com.zrh.urestaurantprivate.bean.Restaurant -> com.zrh.urestaurantprivate.b.i:
    java.lang.String android_app_qrcode -> a
    java.lang.String ios_app_qrcode -> b
    java.lang.String shop_name -> c
    int business_hours_begin -> d
    int business_hours_end -> e
    java.lang.String shop_phone -> f
    java.lang.String shop_address -> g
    java.lang.String host_domain -> h
    int order_time_limit -> i
    int order_times_perday_limit -> j
    int discount_num_perorder_limit -> k
    java.lang.String getAndroid_app_qrcode() -> a
    void setAndroid_app_qrcode(java.lang.String) -> a
    java.lang.String getIos_app_qrcode() -> b
    void setIos_app_qrcode(java.lang.String) -> b
    java.lang.String getShop_name() -> c
    void setShop_name(java.lang.String) -> c
    int getBusiness_hours_begin() -> d
    void setBusiness_hours_begin(int) -> a
    int getBusiness_hours_end() -> e
    void setBusiness_hours_end(int) -> b
    java.lang.String getShop_phone() -> f
    void setShop_phone(java.lang.String) -> d
    java.lang.String getShop_address() -> g
    void setShop_address(java.lang.String) -> e
    java.lang.String getHost_domain() -> h
    void setHost_domain(java.lang.String) -> f
    int getOrder_time_limit() -> i
    void setOrder_time_limit(int) -> c
    int getOrder_times_perday_limit() -> j
    void setOrder_times_perday_limit(int) -> d
    int getDiscount_num_perorder_limit() -> k
    void setDiscount_num_perorder_limit(int) -> e
    java.lang.String toString() -> toString
com.zrh.urestaurantprivate.bean.RestaurantTableInfo -> com.zrh.urestaurantprivate.b.j:
    java.lang.String TableID -> a
    int TableType -> b
    int TableNO -> c
    int TableLocationId -> d
    int TableSeatCount -> e
    int TableIsFree -> f
    int TableMergeInfo -> g
    java.lang.String TableOrderInfo -> h
    java.lang.String TableOther -> i
    java.lang.String TableName -> j
    boolean isChecked -> k
    int isBan -> l
    java.lang.String getTableID() -> a
    void setTableID(java.lang.String) -> a
    int getTableType() -> b
    void setTableType(int) -> a
    int getTableNO() -> c
    void setTableNO(int) -> b
    int getTableLocationId() -> d
    void setTableLocationId(int) -> c
    int getTableSeatCount() -> e
    void setTableSeatCount(int) -> d
    int getTableIsFree() -> f
    void setTableIsFree(int) -> e
    int getTableMergeInfo() -> g
    void setTableMergeInfo(int) -> f
    java.lang.String getTableOrderInfo() -> h
    void setTableOrderInfo(java.lang.String) -> b
    java.lang.String getTableOther() -> i
    void setTableOther(java.lang.String) -> c
    java.lang.String getTableName() -> j
    void setTableName(java.lang.String) -> d
    boolean isChecked() -> k
    void setChecked(boolean) -> a
    int getIsBan() -> l
    void setIsBan(int) -> g
com.zrh.urestaurantprivate.entitydb.AdvertisementDB -> com.zrh.urestaurantprivate.c.a:
    android.database.sqlite.SQLiteDatabase db -> a
    android.content.Context context -> b
    void addEvi(java.util.List) -> a
    java.util.List getEvi() -> a
    void delete() -> b
    void close() -> c
    java.util.List getHa() -> d
com.zrh.urestaurantprivate.entitydb.CategoryDB -> com.zrh.urestaurantprivate.c.b:
    android.database.sqlite.SQLiteDatabase db -> a
    void add(java.util.List) -> a
    java.util.List getEvi() -> a
    java.lang.String getId(java.lang.String) -> a
    void delete() -> b
    void close() -> c
com.zrh.urestaurantprivate.entitydb.DBHelper -> com.zrh.urestaurantprivate.c.c:
    java.io.File sdcardDir -> a
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
    android.database.sqlite.SQLiteDatabase getWritableDatabase() -> getWritableDatabase
com.zrh.urestaurantprivate.entitydb.EnviromentDB -> com.zrh.urestaurantprivate.c.d:
    android.database.sqlite.SQLiteDatabase db -> a
    android.content.Context context -> b
    void addEvi(java.util.List) -> a
    java.util.List getEvi() -> a
    void delete() -> b
    void close() -> c
    java.util.List getHa() -> d
com.zrh.urestaurantprivate.entitydb.MenuDB -> com.zrh.urestaurantprivate.c.e:
    com.zrh.urestaurantprivate.entitydb.DBHelper helper -> a
    android.database.sqlite.SQLiteDatabase db -> b
    void addMenu(java.util.List) -> a
    java.util.List getMenu(java.lang.String) -> a
    java.util.List getAllMenu() -> a
    void delete() -> b
    void close() -> c
com.zrh.urestaurantprivate.entitydb.OrderDetailsDB -> com.zrh.urestaurantprivate.c.f:
    android.database.sqlite.SQLiteDatabase db -> a
    android.content.Context context -> b
    void addOrderInfo(java.util.List) -> a
    java.util.List getOrderInfoMsg() -> a
    void delete() -> b
    void close() -> c
    java.util.List getInfoByOrderId(java.lang.String) -> a
com.zrh.urestaurantprivate.entitydb.OrderInfoDB -> com.zrh.urestaurantprivate.c.g:
    android.database.sqlite.SQLiteDatabase db -> a
    android.content.Context context -> b
    void addOrderInfo(java.util.List) -> a
    void delete() -> a
    void close() -> b
    java.util.List getInfoByOrder_status(java.lang.String) -> a
com.zrh.urestaurantprivate.entitydb.RestaurantInfoDB -> com.zrh.urestaurantprivate.c.h:
    android.database.sqlite.SQLiteDatabase db -> a
    android.content.Context context -> b
    void saveInfo(com.zrh.urestaurantprivate.bean.Restaurant) -> a
    com.zrh.urestaurantprivate.bean.Restaurant getInfo() -> a
    void delete() -> b
    void close() -> c
com.zrh.urestaurantprivate.entitydb.RestaurantTableInfoDB -> com.zrh.urestaurantprivate.c.i:
    android.database.sqlite.SQLiteDatabase db -> a
    android.content.Context context -> b
    void addTableInfo(java.util.List) -> a
    java.util.List getTableInfoMsg() -> a
    void delete() -> b
    void close() -> c
com.zrh.urestaurantprivate.httputils.Base64 -> com.zrh.urestaurantprivate.d.a:
    byte[] base64Alphabet -> a
    char[] lookUpBase64Alphabet -> b
    boolean isWhiteSpace(char) -> a
    boolean isPad(char) -> b
    boolean isData(char) -> c
    java.lang.String encode(byte[]) -> a
    byte[] decode(java.lang.String) -> a
    int removeWhiteSpace(char[]) -> a
com.zrh.urestaurantprivate.httputils.HttpUtils -> com.zrh.urestaurantprivate.d.b:
    int num2 -> a
    java.lang.String getRequestUrl(java.util.Map) -> a
    java.lang.String getJsoneq(java.util.Map) -> b
    java.lang.String changeInputStream(java.io.InputStream) -> a
com.zrh.urestaurantprivate.httputils.ImageTools -> com.zrh.urestaurantprivate.d.c:
    java.util.List list_image -> a
    android.graphics.Bitmap bitmap -> b
    java.util.List list_adv -> c
    java.util.List getImage(java.util.List) -> a
    java.util.List getAdvImage(java.util.List) -> b
com.zrh.urestaurantprivate.httputils.JsonTools -> com.zrh.urestaurantprivate.d.d:
    java.util.Map m_mapErr -> a
    org.json.JSONObject parseJson(java.lang.String) -> a
    java.lang.String getJsonString(org.json.JSONObject,java.lang.String) -> a
    int getJsonInt(org.json.JSONObject,java.lang.String) -> b
    java.util.List getEnvironment(org.json.JSONObject) -> a
    java.util.List getAdvertisement(org.json.JSONObject) -> b
    com.zrh.urestaurantprivate.bean.Restaurant getRestinfo(org.json.JSONObject) -> c
    java.util.List getTableInfo(org.json.JSONObject) -> d
    java.util.List getFreeTableInfo(org.json.JSONObject) -> e
    java.util.List getOpenTableInfo(org.json.JSONObject) -> f
    java.util.List getOrderedTableInfo(org.json.JSONObject) -> g
    java.util.List getOrderData(org.json.JSONObject) -> h
    java.util.List getJsonList(org.json.JSONObject) -> i
    java.util.List getMenuData(org.json.JSONObject) -> j
    java.lang.String getMergeResult(org.json.JSONObject) -> k
    java.lang.String getMergeDescription(org.json.JSONObject) -> l
    java.lang.String getOperaResult(org.json.JSONObject) -> m
    java.lang.String getOperaDescription(org.json.JSONObject) -> n
    java.util.List getMenuCategory(org.json.JSONObject) -> o
    java.util.List getMenus(org.json.JSONObject) -> p
    java.lang.String getClearPictrue(java.lang.String) -> b
    java.lang.String createOrder(java.util.List,com.zrh.urestaurantprivate.bean.Order) -> a
com.zrh.urestaurantprivate.httputils.MyConstants -> com.zrh.urestaurantprivate.d.e:
    java.lang.String HTTP -> a
    boolean m_bIsCatDownload -> b
    boolean isExistsFile(java.lang.String,java.lang.String) -> a
com.zrh.urestaurantprivate.httputils.RequestData -> com.zrh.urestaurantprivate.d.f:
    java.util.Map datas -> a
    com.zrh.urestaurantprivate.httputils.RequestData getInstance() -> a
    com.zrh.urestaurantprivate.httputils.RequestData put(java.lang.String,java.lang.String) -> a
    java.util.Map getParamMap() -> b
com.zrh.urestaurantprivate.httputils.ServerAPI -> com.zrh.urestaurantprivate.d.g:
    com.zrh.urestaurantprivate.httputils.ServerAPI instance -> a
    java.lang.Object lock -> b
    com.zrh.urestaurantprivate.httputils.ServerAPI getInstance(android.content.Context) -> a
    java.util.Map loadAdvertisementPhoto() -> a
    java.util.Map getMenuCategory() -> b
    java.util.Map getMenuMsg(java.lang.String) -> a
    java.util.Map GetEnvPicture() -> c
    java.util.Map tableinfo() -> d
    java.util.Map GetMergeInfoAPI() -> e
    java.util.Map apartInfoAPI() -> f
    java.util.Map getOperaInfoAPI() -> g
    java.util.Map cancelTableAPI() -> h
    java.util.Map orderSure(java.lang.String,java.lang.String) -> a
    java.util.Map getOrderDeal(java.lang.String) -> b
com.zrh.urestaurantprivate.pulltorefresh.EmptyViewMethodAccessor -> com.zrh.urestaurantprivate.pulltorefresh.a:
    void setEmptyViewInternal(android.view.View) -> setEmptyViewInternal
com.zrh.urestaurantprivate.pulltorefresh.FlipLoadingLayout -> com.zrh.urestaurantprivate.pulltorefresh.b:
    android.view.animation.Animation mRotateAnimation -> f
    android.view.animation.Animation mResetRotateAnimation -> g
    int[] $SWITCH_TABLE$com$zrh$urestaurantprivate$pulltorefresh$PullToRefreshBase$Mode -> h
    void onLoadingDrawableSet(android.graphics.drawable.Drawable) -> a
    void onPullImpl(float) -> a
    void pullToRefreshImpl() -> a
    void refreshingImpl() -> b
    void releaseToRefreshImpl() -> c
    void resetImpl() -> d
    int getDefaultDrawableResId() -> getDefaultDrawableResId
    float getDrawableRotationAngle() -> getDrawableRotationAngle
    int[] $SWITCH_TABLE$com$zrh$urestaurantprivate$pulltorefresh$PullToRefreshBase$Mode() -> e
com.zrh.urestaurantprivate.pulltorefresh.ILoadingLayout -> com.zrh.urestaurantprivate.pulltorefresh.c:
    void setLastUpdatedLabel(java.lang.CharSequence) -> setLastUpdatedLabel
    void setLoadingDrawable(android.graphics.drawable.Drawable) -> setLoadingDrawable
    void setPullLabel(java.lang.CharSequence) -> setPullLabel
    void setRefreshingLabel(java.lang.CharSequence) -> setRefreshingLabel
    void setReleaseLabel(java.lang.CharSequence) -> setReleaseLabel
com.zrh.urestaurantprivate.pulltorefresh.IndicatorLayout -> com.zrh.urestaurantprivate.pulltorefresh.d:
    android.view.animation.Animation mInAnim -> a
    android.view.animation.Animation mOutAnim -> b
    android.widget.ImageView mArrowImageView -> c
    android.view.animation.Animation mRotateAnimation -> d
    android.view.animation.Animation mResetRotateAnimation -> e
    int[] $SWITCH_TABLE$com$zrh$urestaurantprivate$pulltorefresh$PullToRefreshBase$Mode -> f
    boolean isVisible() -> a
    void hide() -> b
    void show() -> c
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
    void releaseToRefresh() -> d
    void pullToRefresh() -> e
    int[] $SWITCH_TABLE$com$zrh$urestaurantprivate$pulltorefresh$PullToRefreshBase$Mode() -> f
com.zrh.urestaurantprivate.pulltorefresh.LoadingLayout -> com.zrh.urestaurantprivate.pulltorefresh.e:
    android.view.animation.Interpolator ANIMATION_INTERPOLATOR -> a
    android.widget.FrameLayout mInnerLayout -> f
    android.widget.ImageView mHeaderImage -> b
    android.widget.ProgressBar mHeaderProgress -> c
    boolean mUseIntrinsicAnimation -> g
    android.widget.TextView mHeaderText -> h
    android.widget.TextView mSubHeaderText -> i
    com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$Mode mMode -> d
    com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$Orientation mScrollDirection -> e
    java.lang.CharSequence mPullLabel -> j
    java.lang.CharSequence mRefreshingLabel -> k
    java.lang.CharSequence mReleaseLabel -> l
    int[] $SWITCH_TABLE$com$zrh$urestaurantprivate$pulltorefresh$PullToRefreshBase$Orientation -> m
    int[] $SWITCH_TABLE$com$zrh$urestaurantprivate$pulltorefresh$PullToRefreshBase$Mode -> n
    void setHeight(int) -> setHeight
    void setWidth(int) -> setWidth
    int getContentSize() -> getContentSize
    void hideAllViews() -> f
    void onPull(float) -> b
    void pullToRefresh() -> g
    void refreshing() -> h
    void releaseToRefresh() -> i
    void reset() -> j
    void setLastUpdatedLabel(java.lang.CharSequence) -> setLastUpdatedLabel
    void setLoadingDrawable(android.graphics.drawable.Drawable) -> setLoadingDrawable
    void setPullLabel(java.lang.CharSequence) -> setPullLabel
    void setRefreshingLabel(java.lang.CharSequence) -> setRefreshingLabel
    void setReleaseLabel(java.lang.CharSequence) -> setReleaseLabel
    void setTextTypeface(android.graphics.Typeface) -> setTextTypeface
    void showInvisibleViews() -> k
    int getDefaultDrawableResId() -> getDefaultDrawableResId
    void onLoadingDrawableSet(android.graphics.drawable.Drawable) -> a
    void onPullImpl(float) -> a
    void pullToRefreshImpl() -> a
    void refreshingImpl() -> b
    void releaseToRefreshImpl() -> c
    void resetImpl() -> d
    void setSubHeaderText(java.lang.CharSequence) -> setSubHeaderText
    void setSubTextAppearance(int) -> setSubTextAppearance
    void setSubTextColor(android.content.res.ColorStateList) -> setSubTextColor
    void setTextAppearance(int) -> setTextAppearance
    void setTextColor(android.content.res.ColorStateList) -> setTextColor
    int[] $SWITCH_TABLE$com$zrh$urestaurantprivate$pulltorefresh$PullToRefreshBase$Orientation() -> l
    int[] $SWITCH_TABLE$com$zrh$urestaurantprivate$pulltorefresh$PullToRefreshBase$Mode() -> m
com.zrh.urestaurantprivate.pulltorefresh.LoadingLayoutProxy -> com.zrh.urestaurantprivate.pulltorefresh.f:
    java.util.HashSet mLoadingLayouts -> a
    void addLayout(com.zrh.urestaurantprivate.pulltorefresh.LoadingLayout) -> a
    void setLastUpdatedLabel(java.lang.CharSequence) -> setLastUpdatedLabel
    void setLoadingDrawable(android.graphics.drawable.Drawable) -> setLoadingDrawable
    void setRefreshingLabel(java.lang.CharSequence) -> setRefreshingLabel
    void setPullLabel(java.lang.CharSequence) -> setPullLabel
    void setReleaseLabel(java.lang.CharSequence) -> setReleaseLabel
com.zrh.urestaurantprivate.pulltorefresh.OverscrollHelper -> com.zrh.urestaurantprivate.pulltorefresh.g:
    int[] $SWITCH_TABLE$com$zrh$urestaurantprivate$pulltorefresh$PullToRefreshBase$Orientation -> a
    void overScrollBy(com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase,int,int,int,int,boolean) -> a
    void overScrollBy(com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase,int,int,int,int,int,boolean) -> a
    void overScrollBy(com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase,int,int,int,int,int,int,float,boolean) -> a
    boolean isAndroidOverScrollEnabled(android.view.View) -> a
    int[] $SWITCH_TABLE$com$zrh$urestaurantprivate$pulltorefresh$PullToRefreshBase$Orientation() -> a
com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshAdapterViewBase -> com.zrh.urestaurantprivate.pulltorefresh.h:
    boolean mLastItemVisible -> b
    android.widget.AbsListView$OnScrollListener mOnScrollListener -> c
    com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$OnLastItemVisibleListener mOnLastItemVisibleListener -> d
    android.view.View mEmptyView -> e
    com.zrh.urestaurantprivate.pulltorefresh.IndicatorLayout mIndicatorIvTop -> f
    com.zrh.urestaurantprivate.pulltorefresh.IndicatorLayout mIndicatorIvBottom -> g
    boolean mShowIndicator -> h
    boolean mScrollEmptyView -> i
    int[] $SWITCH_TABLE$com$zrh$urestaurantprivate$pulltorefresh$PullToRefreshBase$Mode -> j
    android.widget.FrameLayout$LayoutParams convertEmptyViewLayoutParams(android.view.ViewGroup$LayoutParams) -> a
    boolean getShowIndicator() -> getShowIndicator
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    void setAdapter(android.widget.ListAdapter) -> setAdapter
    void setEmptyView(android.view.View) -> setEmptyView
    void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener) -> setOnItemClickListener
    void setOnLastItemVisibleListener(com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$OnLastItemVisibleListener) -> setOnLastItemVisibleListener
    void setOnScrollListener(android.widget.AbsListView$OnScrollListener) -> setOnScrollListener
    void setScrollEmptyView(boolean) -> setScrollEmptyView
    void setShowIndicator(boolean) -> setShowIndicator
    void onPullToRefresh() -> a
    void onRefreshing(boolean) -> a
    void onReleaseToRefresh() -> b
    void onReset() -> c
    void handleStyledAttributes(android.content.res.TypedArray) -> a
    boolean isReadyForPullStart() -> d
    boolean isReadyForPullEnd() -> e
    void onScrollChanged(int,int,int,int) -> onScrollChanged
    void updateUIForMode() -> f
    void addIndicatorViews() -> s
    boolean getShowIndicatorInternal() -> getShowIndicatorInternal
    boolean isFirstItemVisible() -> t
    boolean isLastItemVisible() -> u
    void removeIndicatorViews() -> v
    void updateIndicatorViewsVisibility() -> w
    int[] $SWITCH_TABLE$com$zrh$urestaurantprivate$pulltorefresh$PullToRefreshBase$Mode() -> g
com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase -> com.zrh.urestaurantprivate.pulltorefresh.i:
    int mTouchSlop -> b
    float mLastMotionX -> c
    float mLastMotionY -> d
    float mInitialMotionX -> e
    float mInitialMotionY -> f
    boolean mIsBeingDragged -> g
    com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$State mState -> h
    com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$Mode mMode -> i
    com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$Mode mCurrentMode -> j
    android.view.View mRefreshableView -> a
    android.widget.FrameLayout mRefreshableViewWrapper -> k
    boolean mShowViewWhileRefreshing -> l
    boolean mScrollingWhileRefreshingEnabled -> m
    boolean mFilterTouchEvents -> n
    boolean mOverScrollEnabled -> o
    boolean mLayoutVisibilityChangesEnabled -> p
    android.view.animation.Interpolator mScrollAnimationInterpolator -> q
    com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$AnimationStyle mLoadingAnimationStyle -> r
    com.zrh.urestaurantprivate.pulltorefresh.LoadingLayout mHeaderLayout -> s
    com.zrh.urestaurantprivate.pulltorefresh.LoadingLayout mFooterLayout -> t
    com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$OnRefreshListener mOnRefreshListener -> u
    com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$OnRefreshListener2 mOnRefreshListener2 -> v
    com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$OnPullEventListener mOnPullEventListener -> w
    com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$SmoothScrollRunnable mCurrentSmoothScrollRunnable -> x
    boolean mIsDoRefreshOnUIChanged -> y
    com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$OnRefreshListener3 mOnRefreshListener3 -> z
    android.widget.LinearLayout mHeadRootView -> A
    android.widget.TextView mTipsTextView -> B
    android.widget.TextView mLastUpdatedTextView -> C
    android.widget.ImageView mArrowImageView -> D
    android.widget.ProgressBar mProgressBar -> E
    int[] $SWITCH_TABLE$com$zrh$urestaurantprivate$pulltorefresh$PullToRefreshBase$Orientation -> F
    int[] $SWITCH_TABLE$com$zrh$urestaurantprivate$pulltorefresh$PullToRefreshBase$State -> G
    int[] $SWITCH_TABLE$com$zrh$urestaurantprivate$pulltorefresh$PullToRefreshBase$Mode -> H
    void addView(android.view.View,int,android.view.ViewGroup$LayoutParams) -> addView
    com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$Mode getCurrentMode() -> getCurrentMode
    boolean getFilterTouchEvents() -> getFilterTouchEvents
    com.zrh.urestaurantprivate.pulltorefresh.ILoadingLayout getLoadingLayoutProxy() -> getLoadingLayoutProxy
    com.zrh.urestaurantprivate.pulltorefresh.ILoadingLayout getLoadingLayoutProxy(boolean,boolean) -> a
    com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$Mode getMode() -> getMode
    android.view.View getRefreshableView() -> getRefreshableView
    boolean getShowViewWhileRefreshing() -> getShowViewWhileRefreshing
    com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$State getState() -> getState
    void setDoRefreshOnUIChanged(boolean) -> setDoRefreshOnUIChanged
    boolean isPullToRefreshEnabled() -> h
    boolean isPullToRefreshOverScrollEnabled() -> i
    boolean isRefreshing() -> j
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    void onRefreshComplete() -> k
    void onWindowFocusChanged(boolean) -> onWindowFocusChanged
    void pull2RefreshManually() -> l
    void changeHeaderViewRefreshState() -> g
    void onRefresh() -> s
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void setScrollingWhileRefreshingEnabled(boolean) -> setScrollingWhileRefreshingEnabled
    void setDisableScrollingWhileRefreshing(boolean) -> setDisableScrollingWhileRefreshing
    void setFilterTouchEvents(boolean) -> setFilterTouchEvents
    void setLastUpdatedLabel(java.lang.CharSequence) -> setLastUpdatedLabel
    void setLoadingDrawable(android.graphics.drawable.Drawable) -> setLoadingDrawable
    void setLongClickable(boolean) -> setLongClickable
    void setMode(com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$Mode) -> setMode
    void setOnPullEventListener(com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$OnPullEventListener) -> setOnPullEventListener
    void setOnRefreshListener(com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$OnRefreshListener) -> setOnRefreshListener
    void setOnRefreshListener(com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$OnRefreshListener2) -> setOnRefreshListener
    void setPullLabel(java.lang.CharSequence) -> setPullLabel
    void setPullToRefreshEnabled(boolean) -> setPullToRefreshEnabled
    void setPullToRefreshOverScrollEnabled(boolean) -> setPullToRefreshOverScrollEnabled
    void setRefreshing() -> m
    void setRefreshing(boolean) -> setRefreshing
    void setRefreshingLabel(java.lang.CharSequence) -> setRefreshingLabel
    void setReleaseLabel(java.lang.CharSequence) -> setReleaseLabel
    void setReleaseLabel(java.lang.CharSequence,com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$Mode) -> a
    void setScrollAnimationInterpolator(android.view.animation.Interpolator) -> setScrollAnimationInterpolator
    void setShowViewWhileRefreshing(boolean) -> setShowViewWhileRefreshing
    com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$Orientation getPullToRefreshScrollDirection() -> getPullToRefreshScrollDirection
    void setState(com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$State,boolean[]) -> a
    void addViewInternal(android.view.View,int,android.view.ViewGroup$LayoutParams) -> a
    void addViewInternal(android.view.View,android.view.ViewGroup$LayoutParams) -> a
    com.zrh.urestaurantprivate.pulltorefresh.LoadingLayout createLoadingLayout(android.content.Context,com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$Mode,android.content.res.TypedArray) -> a
    com.zrh.urestaurantprivate.pulltorefresh.LoadingLayoutProxy createLoadingLayoutProxy(boolean,boolean) -> b
    android.view.View createRefreshableView(android.content.Context,android.util.AttributeSet) -> a
    void disableLoadingLayoutVisibilityChanges() -> n
    com.zrh.urestaurantprivate.pulltorefresh.LoadingLayout getFooterLayout() -> getFooterLayout
    int getFooterSize() -> getFooterSize
    com.zrh.urestaurantprivate.pulltorefresh.LoadingLayout getHeaderLayout() -> getHeaderLayout
    int getHeaderSize() -> getHeaderSize
    int getPullToRefreshScrollDuration() -> getPullToRefreshScrollDuration
    int getPullToRefreshScrollDurationLonger() -> getPullToRefreshScrollDurationLonger
    android.widget.FrameLayout getRefreshableViewWrapper() -> getRefreshableViewWrapper
    void handleStyledAttributes(android.content.res.TypedArray) -> a
    boolean isReadyForPullEnd() -> e
    boolean isReadyForPullStart() -> d
    void onPtrRestoreInstanceState(android.os.Bundle) -> a
    void onPtrSaveInstanceState(android.os.Bundle) -> b
    void onPullToRefresh() -> a
    void onRefreshing(boolean) -> a
    void onReleaseToRefresh() -> b
    void onReset() -> c
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void refreshLoadingViewsSize() -> o
    void refreshRefreshableViewSize(int,int) -> a
    void setHeaderScroll(int) -> setHeaderScroll
    void smoothScrollTo(int) -> a
    void smoothScrollTo(int,com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$OnSmoothScrollFinishedListener) -> a
    void updateUIForMode() -> f
    void addRefreshableView(android.content.Context,android.view.View) -> a
    void callRefreshListener() -> t
    void init(android.content.Context,android.util.AttributeSet) -> b
    boolean isReadyForPull() -> u
    void pullEvent() -> v
    android.widget.LinearLayout$LayoutParams getLoadingLayoutLayoutParams() -> getLoadingLayoutLayoutParams
    int getMaximumPullScroll() -> getMaximumPullScroll
    void smoothScrollTo(int,long) -> a
    void smoothScrollTo(int,long,long,com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$OnSmoothScrollFinishedListener) -> a
    android.view.animation.Interpolator access$0(com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase) -> a
    int[] $SWITCH_TABLE$com$zrh$urestaurantprivate$pulltorefresh$PullToRefreshBase$Orientation() -> p
    int[] $SWITCH_TABLE$com$zrh$urestaurantprivate$pulltorefresh$PullToRefreshBase$State() -> q
    int[] $SWITCH_TABLE$com$zrh$urestaurantprivate$pulltorefresh$PullToRefreshBase$Mode() -> r
    void access$4(com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase) -> b
com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$1 -> com.zrh.urestaurantprivate.pulltorefresh.j:
    com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase this$0 -> a
    void onSmoothScrollFinished() -> a
com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$2 -> com.zrh.urestaurantprivate.pulltorefresh.k:
    com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase this$0 -> a
    void run() -> run
com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$AnimationStyle -> com.zrh.urestaurantprivate.pulltorefresh.l:
    com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$AnimationStyle ROTATE -> a
    com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$AnimationStyle FLIP -> b
    int[] $SWITCH_TABLE$com$zrh$urestaurantprivate$pulltorefresh$PullToRefreshBase$AnimationStyle -> c
    com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$AnimationStyle[] ENUM$VALUES -> d
    com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$AnimationStyle getDefault() -> a
    com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$AnimationStyle mapIntToValue(int) -> a
    com.zrh.urestaurantprivate.pulltorefresh.LoadingLayout createLoadingLayout(android.content.Context,com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$Mode,com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$Orientation,android.content.res.TypedArray) -> a
    com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$AnimationStyle[] values() -> values
    com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$AnimationStyle valueOf(java.lang.String) -> valueOf
    int[] $SWITCH_TABLE$com$zrh$urestaurantprivate$pulltorefresh$PullToRefreshBase$AnimationStyle() -> b
com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$Mode -> com.zrh.urestaurantprivate.pulltorefresh.m:
    com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$Mode DISABLED -> a
    com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$Mode PULL_FROM_START -> b
    com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$Mode PULL_FROM_END -> c
    com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$Mode BOTH -> d
    com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$Mode MANUAL_REFRESH_ONLY -> e
    com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$Mode PULL_DOWN_TO_REFRESH -> f
    com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$Mode PULL_UP_TO_REFRESH -> g
    int mIntValue -> h
    com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$Mode[] ENUM$VALUES -> i
    com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$Mode mapIntToValue(int) -> a
    com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$Mode getDefault() -> a
    boolean permitsPullToRefresh() -> b
    boolean showHeaderLoadingLayout() -> c
    boolean showFooterLoadingLayout() -> d
    int getIntValue() -> e
    com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$Mode[] values() -> values
    com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$Mode valueOf(java.lang.String) -> valueOf
com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$OnLastItemVisibleListener -> com.zrh.urestaurantprivate.pulltorefresh.n:
    void onLastItemVisible() -> a
com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$OnPullEventListener -> com.zrh.urestaurantprivate.pulltorefresh.o:
    void onPullEvent(com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase,com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$State,com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$Mode) -> a
com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$OnRefreshListener -> com.zrh.urestaurantprivate.pulltorefresh.p:
    void onRefresh(com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase) -> a
com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$OnRefreshListener2 -> com.zrh.urestaurantprivate.pulltorefresh.q:
    void onPullDownToRefresh(com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase) -> a
    void onPullUpToRefresh(com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase) -> b
com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$OnRefreshListener3 -> com.zrh.urestaurantprivate.pulltorefresh.r:
    void onRefresh() -> a
com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$OnSmoothScrollFinishedListener -> com.zrh.urestaurantprivate.pulltorefresh.s:
    void onSmoothScrollFinished() -> a
com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$Orientation -> com.zrh.urestaurantprivate.pulltorefresh.t:
    com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$Orientation VERTICAL -> a
    com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$Orientation HORIZONTAL -> b
    com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$Orientation[] ENUM$VALUES -> c
    com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$Orientation[] values() -> values
    com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$Orientation valueOf(java.lang.String) -> valueOf
com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$SmoothScrollRunnable -> com.zrh.urestaurantprivate.pulltorefresh.u:
    android.view.animation.Interpolator mInterpolator -> b
    int mScrollToY -> c
    int mScrollFromY -> d
    long mDuration -> e
    com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$OnSmoothScrollFinishedListener mListener -> f
    boolean mContinueRunning -> g
    long mStartTime -> h
    int mCurrentY -> i
    com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase this$0 -> a
    void run() -> run
    void stop() -> a
com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$State -> com.zrh.urestaurantprivate.pulltorefresh.v:
    com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$State RESET -> a
    com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$State PULL_TO_REFRESH -> b
    com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$State RELEASE_TO_REFRESH -> c
    com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$State REFRESHING -> d
    com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$State MANUAL_REFRESHING -> e
    com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$State OVERSCROLLING -> f
    int mIntValue -> g
    com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$State[] ENUM$VALUES -> h
    com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$State mapIntToValue(int) -> a
    int getIntValue() -> a
    com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$State[] values() -> values
    com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$State valueOf(java.lang.String) -> valueOf
com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshListView -> com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshListView:
    com.zrh.urestaurantprivate.pulltorefresh.LoadingLayout mHeaderLoadingView -> b
    com.zrh.urestaurantprivate.pulltorefresh.LoadingLayout mFooterLoadingView -> c
    android.widget.FrameLayout mLvFooterLoadingFrame -> d
    boolean mListViewExtrasEnabled -> e
    int[] $SWITCH_TABLE$com$zrh$urestaurantprivate$pulltorefresh$PullToRefreshBase$Mode -> f
    com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase$Orientation getPullToRefreshScrollDirection() -> getPullToRefreshScrollDirection
    void onRefreshing(boolean) -> a
    void onReset() -> c
    com.zrh.urestaurantprivate.pulltorefresh.LoadingLayoutProxy createLoadingLayoutProxy(boolean,boolean) -> b
    android.widget.ListView createListView(android.content.Context,android.util.AttributeSet) -> b
    android.widget.ListView createRefreshableView(android.content.Context,android.util.AttributeSet) -> c
    void handleStyledAttributes(android.content.res.TypedArray) -> a
    android.view.View createRefreshableView(android.content.Context,android.util.AttributeSet) -> a
    android.widget.FrameLayout access$1(com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshListView) -> a
    int[] $SWITCH_TABLE$com$zrh$urestaurantprivate$pulltorefresh$PullToRefreshBase$Mode() -> s
com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshListView$InternalListView -> com.zrh.urestaurantprivate.pulltorefresh.w:
    boolean mAddedLvFooter -> b
    com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshListView this$0 -> a
    void dispatchDraw(android.graphics.Canvas) -> dispatchDraw
    boolean dispatchTouchEvent(android.view.MotionEvent) -> dispatchTouchEvent
    void setAdapter(android.widget.ListAdapter) -> setAdapter
    void setEmptyView(android.view.View) -> setEmptyView
    void setEmptyViewInternal(android.view.View) -> setEmptyViewInternal
com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshListView$InternalListViewSDK9 -> com.zrh.urestaurantprivate.pulltorefresh.x:
    com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshListView this$0 -> b
    boolean overScrollBy(int,int,int,int,int,int,int,int,boolean) -> overScrollBy
com.zrh.urestaurantprivate.pulltorefresh.RotateLoadingLayout -> com.zrh.urestaurantprivate.pulltorefresh.y:
    android.view.animation.Animation mRotateAnimation -> f
    android.graphics.Matrix mHeaderImageMatrix -> g
    float mRotationPivotX -> h
    float mRotationPivotY -> i
    boolean mRotateDrawableWhilePulling -> j
    void onLoadingDrawableSet(android.graphics.drawable.Drawable) -> a
    void onPullImpl(float) -> a
    void refreshingImpl() -> b
    void resetImpl() -> d
    void resetImageRotation() -> e
    void pullToRefreshImpl() -> a
    void releaseToRefreshImpl() -> c
    int getDefaultDrawableResId() -> getDefaultDrawableResId
com.zrh.urestaurantprivate.pulltorefresh.Utils -> com.zrh.urestaurantprivate.pulltorefresh.z:
    void warnDeprecation(java.lang.String,java.lang.String) -> a
com.zrh.urestaurantprivate.pulltorefresh.ViewCompat -> com.zrh.urestaurantprivate.pulltorefresh.aa:
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    void setBackground(android.view.View,android.graphics.drawable.Drawable) -> a
com.zrh.urestaurantprivate.pulltorefresh.ViewCompat$SDK16 -> com.zrh.urestaurantprivate.pulltorefresh.ab:
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    void setBackground(android.view.View,android.graphics.drawable.Drawable) -> a
com.zrh.urestaurantprivate.thread.DownLoadThread -> com.zrh.urestaurantprivate.e.a:
    android.content.Context context -> a
    java.lang.String[] params -> b
    void createSDCardDir() -> a
    void run() -> run
    void writeToSDCard(java.lang.String,java.io.InputStream,java.lang.String) -> a
com.zrh.urestaurantprivate.thread.GetAdvPictureThread -> com.zrh.urestaurantprivate.e.b:
    com.zrh.urestaurantprivate.bean.Advertisement advLoc -> a
    com.zrh.urestaurantprivate.bean.Advertisement adv -> b
    java.util.List localAdv -> c
    com.zrh.urestaurantprivate.entitydb.AdvertisementDB adb -> d
    org.json.JSONObject jsonObj -> e
    java.lang.String jsonString -> f
    java.util.List advMent -> g
    android.content.Context context -> h
    void run() -> run
com.zrh.urestaurantprivate.thread.GetDishInfoThread -> com.zrh.urestaurantprivate.e.c:
    java.util.List name -> a
    android.content.Context context -> b
    void run() -> run
com.zrh.urestaurantprivate.thread.GetDishPictureThread -> com.zrh.urestaurantprivate.e.d:
    org.json.JSONObject menuJsonObj -> a
    java.util.List menus -> b
    com.zrh.urestaurantprivate.umenu.MyApplication application -> c
    void run() -> run
com.zrh.urestaurantprivate.thread.GetEnvPictureThread -> com.zrh.urestaurantprivate.e.e:
    java.util.List localMenu -> a
    com.zrh.urestaurantprivate.bean.ResEnvPicInfo evn -> b
    com.zrh.urestaurantprivate.bean.ResEnvPicInfo evnLoc -> c
    com.zrh.urestaurantprivate.bean.Restaurant rest -> d
    com.zrh.urestaurantprivate.entitydb.RestaurantInfoDB rdb -> e
    org.json.JSONObject jsonObj -> f
    java.lang.String jsonString -> g
    com.zrh.urestaurantprivate.entitydb.EnviromentDB edb -> h
    java.util.List ments -> i
    android.content.Context context -> j
    void run() -> run
com.zrh.urestaurantprivate.thread.OrderInfoThread -> com.zrh.urestaurantprivate.e.f:
    java.util.List jsonObjectList -> a
    java.util.List listMenuDetails -> b
    java.util.List listOrderInfo -> c
    com.zrh.urestaurantprivate.entitydb.OrderInfoDB oInfoDB -> d
    com.zrh.urestaurantprivate.entitydb.OrderDetailsDB oDetailsDb -> e
    java.lang.String orderString -> f
    org.json.JSONObject jsonObject -> g
    android.content.Context context -> h
    com.zrh.urestaurantprivate.util.SharePreferenceUtil sp -> i
    void run() -> run
com.zrh.urestaurantprivate.thread.RefreshOrderInfoTask -> com.zrh.urestaurantprivate.e.g:
    android.content.Context mContext -> a
    com.zrh.urestaurantprivate.util.SharePreferenceUtil sp -> b
    java.lang.String orderString -> c
    org.json.JSONObject jsonObject -> d
    java.util.List listOrderInfo -> e
    com.zrh.urestaurantprivate.entitydb.OrderInfoDB oInfoDB -> f
    com.zrh.urestaurantprivate.entitydb.OrderDetailsDB oDetailsDb -> g
    java.util.List jsonObjectList -> h
    java.util.List listMenuDetails -> i
    com.zrh.urestaurantprivate.adapter.OrderListAdapter orderListAdapter -> j
    com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshListView refreshListView -> k
    java.lang.String order_status -> l
    void onPreExecute() -> onPreExecute
    java.lang.String doInBackground(java.lang.Void[]) -> a
    void onPostExecute(java.lang.String) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
    android.content.Context access$2(com.zrh.urestaurantprivate.thread.RefreshOrderInfoTask) -> a
    void access$3(com.zrh.urestaurantprivate.thread.RefreshOrderInfoTask,com.zrh.urestaurantprivate.entitydb.OrderDetailsDB) -> a
    com.zrh.urestaurantprivate.entitydb.OrderDetailsDB access$4(com.zrh.urestaurantprivate.thread.RefreshOrderInfoTask) -> b
    java.util.List access$5(com.zrh.urestaurantprivate.thread.RefreshOrderInfoTask) -> c
    void access$6(com.zrh.urestaurantprivate.thread.RefreshOrderInfoTask,java.util.List) -> a
    java.util.List access$7(com.zrh.urestaurantprivate.thread.RefreshOrderInfoTask) -> d
com.zrh.urestaurantprivate.thread.RefreshOrderInfoTask$1 -> com.zrh.urestaurantprivate.e.h:
    com.zrh.urestaurantprivate.thread.RefreshOrderInfoTask this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.zrh.urestaurantprivate.umenu.BaseFragment -> com.zrh.urestaurantprivate.umenu.a:
    java.lang.String catId -> P
    android.widget.ListView dishListView -> Q
    com.zrh.urestaurantprivate.adapter.DishesListViewAdapter dishesListViewAdapter -> R
    char symbol -> S
    android.content.Context context -> T
    com.zrh.urestaurantprivate.umenu.MyApplication application -> U
    android.widget.TextView tvNodata -> V
    void onCreate(android.os.Bundle) -> d
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> a
    void onAttach(android.app.Activity) -> a
    void UpdateDatas(java.lang.String) -> a
com.zrh.urestaurantprivate.umenu.MenuDetailActivity -> com.zrh.urestaurantprivate.umenu.MenuDetailActivity:
    android.widget.Button detail_back -> b
    android.widget.Button rush_purchase -> c
    android.widget.TextView price -> d
    android.widget.EditText num -> e
    android.widget.TextView zhekou -> f
    android.widget.TextView total_price -> g
    android.widget.TextView name -> h
    android.widget.TextView detail_msg -> i
    android.widget.ImageView add -> j
    android.widget.ImageView sub -> k
    com.zrh.urestaurantprivate.bean.OrderList orderList -> l
    com.zrh.urestaurantprivate.umenu.Upagetwo$MyHandler mHandler -> m
    com.zrh.urestaurantprivate.umenu.MyApplication application -> n
    com.zrh.urestaurantprivate.umenu.MenuDetailActivity$DetailHandler handler -> o
    float total -> p
    int i -> q
    com.zrh.urestaurantprivate.entitydb.RestaurantInfoDB rdb -> r
    android.widget.Toast mToast -> s
    int orderNum -> t
    float totalNum -> u
    android.text.TextWatcher mTextWatcher -> a
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
    void showToast(android.content.Context,java.lang.String,int) -> a
    android.widget.EditText access$0(com.zrh.urestaurantprivate.umenu.MenuDetailActivity) -> a
    void access$1(com.zrh.urestaurantprivate.umenu.MenuDetailActivity,android.content.Context,java.lang.String,int) -> a
    android.widget.ImageView access$2(com.zrh.urestaurantprivate.umenu.MenuDetailActivity) -> b
    void access$3(com.zrh.urestaurantprivate.umenu.MenuDetailActivity,int) -> a
    com.zrh.urestaurantprivate.bean.OrderList access$4(com.zrh.urestaurantprivate.umenu.MenuDetailActivity) -> c
    int access$5(com.zrh.urestaurantprivate.umenu.MenuDetailActivity) -> d
    void access$6(com.zrh.urestaurantprivate.umenu.MenuDetailActivity,float) -> a
    android.widget.TextView access$7(com.zrh.urestaurantprivate.umenu.MenuDetailActivity) -> e
    float access$8(com.zrh.urestaurantprivate.umenu.MenuDetailActivity) -> f
    float access$9(com.zrh.urestaurantprivate.umenu.MenuDetailActivity) -> g
    void access$10(com.zrh.urestaurantprivate.umenu.MenuDetailActivity,int) -> b
    int access$11(com.zrh.urestaurantprivate.umenu.MenuDetailActivity) -> h
com.zrh.urestaurantprivate.umenu.MenuDetailActivity$1 -> com.zrh.urestaurantprivate.umenu.b:
    com.zrh.urestaurantprivate.umenu.MenuDetailActivity this$0 -> a
    void afterTextChanged(android.text.Editable) -> afterTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
com.zrh.urestaurantprivate.umenu.MenuDetailActivity$DetailHandler -> com.zrh.urestaurantprivate.umenu.c:
    com.zrh.urestaurantprivate.umenu.MenuDetailActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.zrh.urestaurantprivate.umenu.MyApplication -> com.zrh.urestaurantprivate.umenu.MyApplication:
    float total -> a
    float temp -> b
    java.util.List orderlist -> c
    com.zrh.urestaurantprivate.bean.Order order -> d
    int outtime -> e
    com.zrh.urestaurantprivate.util.SharePreferenceUtil util -> f
    boolean isstop -> g
    java.lang.String phoneid -> h
    java.lang.String code -> i
    int isporblem -> j
    java.lang.String foodtime -> k
    java.lang.String session -> l
    java.lang.String zk -> m
    java.lang.String titles -> n
    java.lang.String infos -> o
    java.lang.String seat_id -> p
    java.lang.String tableflag -> q
    java.util.List menulist -> r
    void onCreate() -> onCreate
com.zrh.urestaurantprivate.umenu.MyRestaurantActivity -> com.zrh.urestaurantprivate.umenu.MyRestaurantActivity:
    android.widget.ImageView[] imagePoints -> a
    android.widget.ImageView[] imageViewsRes -> b
    android.widget.ImageView imageView -> c
    android.widget.ImageView imageviewRes -> d
    android.support.v4.view.ViewPager advPager -> e
    java.util.concurrent.atomic.AtomicInteger whatInt -> f
    java.util.List advMent -> g
    java.util.List advListBitmap -> h
    java.util.List resListBitmap -> i
    android.support.v4.view.ViewPager vpager_enviroment -> j
    java.util.List resEnvPicInfo -> k
    android.graphics.Bitmap eBitmap -> l
    android.graphics.Bitmap aBitmap -> m
    android.app.Dialog mDialog -> n
    java.util.List advBitmapChangeImage -> o
    java.util.List envBtimapChangeImage -> p
    android.widget.ImageView advImage -> q
    android.widget.ImageView envImage -> r
    boolean isExit -> s
    android.widget.Toast mToast -> t
    android.widget.ImageView iv -> u
    android.widget.LinearLayout ll_renvpic -> v
    android.os.Handler viewHandler -> w
    android.os.Handler handler -> x
    android.view.View newView -> y
    android.view.View newView1 -> z
    com.zrh.urestaurantprivate.util.SharePreferenceUtil sp -> A
    com.zrh.urestaurantprivate.entitydb.AdvertisementDB adb -> B
    java.lang.String envString -> C
    org.json.JSONObject envJson -> D
    java.util.List advList -> E
    java.util.List resList -> F
    android.view.ViewGroup group -> G
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void doFirst() -> d
    void getAdvPicture() -> e
    void getEnvPicture() -> f
    void initResViewPager() -> g
    void initViewPager() -> h
    void changeToadvView() -> a
    void changeToenvView() -> b
    void showRequestDialog(java.lang.String) -> a
    void closeReflashDialog() -> c
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void exitBy2Click() -> i
    void showToast(android.content.Context,java.lang.String,int) -> a
    android.graphics.Bitmap getImageThumbnail(java.lang.String) -> b
    android.support.v4.view.ViewPager access$0(com.zrh.urestaurantprivate.umenu.MyRestaurantActivity) -> a
    java.util.concurrent.atomic.AtomicInteger access$1(com.zrh.urestaurantprivate.umenu.MyRestaurantActivity) -> b
    android.widget.ImageView access$2(com.zrh.urestaurantprivate.umenu.MyRestaurantActivity) -> c
    android.widget.LinearLayout access$3(com.zrh.urestaurantprivate.umenu.MyRestaurantActivity) -> d
    void access$4(com.zrh.urestaurantprivate.umenu.MyRestaurantActivity) -> e
    void access$5(com.zrh.urestaurantprivate.umenu.MyRestaurantActivity) -> f
    void access$6(com.zrh.urestaurantprivate.umenu.MyRestaurantActivity) -> g
    void access$7(com.zrh.urestaurantprivate.umenu.MyRestaurantActivity) -> h
    java.util.List access$8(com.zrh.urestaurantprivate.umenu.MyRestaurantActivity) -> i
    java.util.List access$9(com.zrh.urestaurantprivate.umenu.MyRestaurantActivity) -> j
    void access$10(com.zrh.urestaurantprivate.umenu.MyRestaurantActivity,java.lang.String) -> a
    java.lang.String access$11(com.zrh.urestaurantprivate.umenu.MyRestaurantActivity) -> k
    android.os.Handler access$12(com.zrh.urestaurantprivate.umenu.MyRestaurantActivity) -> l
    void access$13(com.zrh.urestaurantprivate.umenu.MyRestaurantActivity,org.json.JSONObject) -> a
    org.json.JSONObject access$14(com.zrh.urestaurantprivate.umenu.MyRestaurantActivity) -> m
    void access$15(com.zrh.urestaurantprivate.umenu.MyRestaurantActivity,java.util.List) -> a
    void access$16(com.zrh.urestaurantprivate.umenu.MyRestaurantActivity,java.util.List) -> b
    java.util.List access$17(com.zrh.urestaurantprivate.umenu.MyRestaurantActivity) -> n
    void access$18(com.zrh.urestaurantprivate.umenu.MyRestaurantActivity,java.util.List) -> c
    java.util.List access$19(com.zrh.urestaurantprivate.umenu.MyRestaurantActivity) -> o
    java.util.List access$20(com.zrh.urestaurantprivate.umenu.MyRestaurantActivity) -> p
    void access$21(com.zrh.urestaurantprivate.umenu.MyRestaurantActivity,java.util.List) -> d
    java.util.List access$22(com.zrh.urestaurantprivate.umenu.MyRestaurantActivity) -> q
    android.os.Handler access$24(com.zrh.urestaurantprivate.umenu.MyRestaurantActivity) -> r
    android.widget.ImageView[] access$25(com.zrh.urestaurantprivate.umenu.MyRestaurantActivity) -> s
    void access$26(com.zrh.urestaurantprivate.umenu.MyRestaurantActivity,boolean) -> a
com.zrh.urestaurantprivate.umenu.MyRestaurantActivity$1 -> com.zrh.urestaurantprivate.umenu.d:
    com.zrh.urestaurantprivate.umenu.MyRestaurantActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.zrh.urestaurantprivate.umenu.MyRestaurantActivity$2 -> com.zrh.urestaurantprivate.umenu.e:
    com.zrh.urestaurantprivate.umenu.MyRestaurantActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.zrh.urestaurantprivate.umenu.MyRestaurantActivity$3 -> com.zrh.urestaurantprivate.umenu.f:
    com.zrh.urestaurantprivate.umenu.MyRestaurantActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.zrh.urestaurantprivate.umenu.MyRestaurantActivity$4 -> com.zrh.urestaurantprivate.umenu.g:
    com.zrh.urestaurantprivate.umenu.MyRestaurantActivity this$0 -> a
    void run() -> run
com.zrh.urestaurantprivate.umenu.MyRestaurantActivity$5 -> com.zrh.urestaurantprivate.umenu.h:
    com.zrh.urestaurantprivate.umenu.MyRestaurantActivity this$0 -> a
    void run() -> run
com.zrh.urestaurantprivate.umenu.MyRestaurantActivity$AdvAdapter -> com.zrh.urestaurantprivate.umenu.i:
    com.zrh.urestaurantprivate.umenu.MyRestaurantActivity this$0 -> a
    void destroyItem(android.view.View,int,java.lang.Object) -> a
    int getCount() -> b
    java.lang.Object instantiateItem(android.view.View,int) -> a
    boolean isViewFromObject(android.view.View,java.lang.Object) -> a
com.zrh.urestaurantprivate.umenu.MyRestaurantActivity$GetEnvPictureThread -> com.zrh.urestaurantprivate.umenu.j:
    com.zrh.urestaurantprivate.umenu.MyRestaurantActivity this$0 -> a
    void run() -> run
    com.zrh.urestaurantprivate.umenu.MyRestaurantActivity access$1(com.zrh.urestaurantprivate.umenu.MyRestaurantActivity$GetEnvPictureThread) -> a
com.zrh.urestaurantprivate.umenu.MyRestaurantActivity$GetEnvPictureThread$1 -> com.zrh.urestaurantprivate.umenu.k:
    com.zrh.urestaurantprivate.umenu.MyRestaurantActivity$GetEnvPictureThread this$1 -> a
    void run() -> run
com.zrh.urestaurantprivate.umenu.MyRestaurantActivity$GetEnvPictureThread$2 -> com.zrh.urestaurantprivate.umenu.l:
    com.zrh.urestaurantprivate.umenu.MyRestaurantActivity$GetEnvPictureThread this$1 -> a
    void run() -> run
com.zrh.urestaurantprivate.umenu.MyRestaurantActivity$GuidePageChangeListener -> com.zrh.urestaurantprivate.umenu.m:
    android.widget.ImageView[] imageViewv -> b
    com.zrh.urestaurantprivate.umenu.MyRestaurantActivity this$0 -> a
    void onPageScrollStateChanged(int) -> b
    void onPageScrolled(int,float,int) -> a
    void onPageSelected(int) -> a
com.zrh.urestaurantprivate.umenu.MyRestaurantActivity$MyPagerAdapter -> com.zrh.urestaurantprivate.umenu.n:
    com.zrh.urestaurantprivate.umenu.MyRestaurantActivity this$0 -> a
    int getCount() -> b
    void destroyItem(android.view.View,int,java.lang.Object) -> a
    java.lang.Object instantiateItem(android.view.View,int) -> a
    boolean isViewFromObject(android.view.View,java.lang.Object) -> a
com.zrh.urestaurantprivate.umenu.MyRestaurantActivity$advThread -> com.zrh.urestaurantprivate.umenu.o:
    com.zrh.urestaurantprivate.umenu.MyRestaurantActivity this$0 -> a
    void run() -> run
com.zrh.urestaurantprivate.umenu.MyRestaurantActivity$envThread -> com.zrh.urestaurantprivate.umenu.p:
    com.zrh.urestaurantprivate.umenu.MyRestaurantActivity this$0 -> a
    void run() -> run
com.zrh.urestaurantprivate.umenu.OrderDealFour -> com.zrh.urestaurantprivate.umenu.OrderDealFour:
    android.widget.TextView tv_back -> a
    android.widget.TextView tv_version -> b
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
    java.lang.String getVersionName() -> a
com.zrh.urestaurantprivate.umenu.OrderDealOne -> com.zrh.urestaurantprivate.umenu.OrderDealOne:
    java.lang.String value -> a
    com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshListView refreshListView -> b
    android.widget.TextView tv_back -> c
    com.zrh.urestaurantprivate.thread.RefreshOrderInfoTask refreshOrderInfoTask -> d
    void onCreate(android.os.Bundle) -> onCreate
    void initRefreshListView() -> a
    void getInfo() -> b
    void executeRefreshOrderTask() -> c
    void onClick(android.view.View) -> onClick
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void access$0(com.zrh.urestaurantprivate.umenu.OrderDealOne) -> a
    com.zrh.urestaurantprivate.thread.RefreshOrderInfoTask access$1(com.zrh.urestaurantprivate.umenu.OrderDealOne) -> b
    void access$2(com.zrh.urestaurantprivate.umenu.OrderDealOne,com.zrh.urestaurantprivate.thread.RefreshOrderInfoTask) -> a
com.zrh.urestaurantprivate.umenu.OrderDealOne$1 -> com.zrh.urestaurantprivate.umenu.q:
    com.zrh.urestaurantprivate.umenu.OrderDealOne this$0 -> a
    void onPullDownToRefresh(com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase) -> a
    void onPullUpToRefresh(com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase) -> b
com.zrh.urestaurantprivate.umenu.OrderDealOne$2 -> com.zrh.urestaurantprivate.umenu.r:
    com.zrh.urestaurantprivate.umenu.OrderDealOne this$0 -> a
    void run() -> run
com.zrh.urestaurantprivate.umenu.OrderDealThree -> com.zrh.urestaurantprivate.umenu.OrderDealThree:
    java.lang.String value -> a
    com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshListView refreshListView -> b
    android.widget.TextView tv_back -> c
    com.zrh.urestaurantprivate.thread.RefreshOrderInfoTask refreshOrderInfoTask -> d
    void onCreate(android.os.Bundle) -> onCreate
    void initRefreshListView() -> a
    void getInfo() -> b
    void executeRefreshOrderTask() -> c
    void onClick(android.view.View) -> onClick
    void access$0(com.zrh.urestaurantprivate.umenu.OrderDealThree) -> a
    com.zrh.urestaurantprivate.thread.RefreshOrderInfoTask access$1(com.zrh.urestaurantprivate.umenu.OrderDealThree) -> b
    void access$2(com.zrh.urestaurantprivate.umenu.OrderDealThree,com.zrh.urestaurantprivate.thread.RefreshOrderInfoTask) -> a
com.zrh.urestaurantprivate.umenu.OrderDealThree$1 -> com.zrh.urestaurantprivate.umenu.s:
    com.zrh.urestaurantprivate.umenu.OrderDealThree this$0 -> a
    void onPullDownToRefresh(com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase) -> a
    void onPullUpToRefresh(com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase) -> b
com.zrh.urestaurantprivate.umenu.OrderDealThree$2 -> com.zrh.urestaurantprivate.umenu.t:
    com.zrh.urestaurantprivate.umenu.OrderDealThree this$0 -> a
    void run() -> run
com.zrh.urestaurantprivate.umenu.OrderDealTwo -> com.zrh.urestaurantprivate.umenu.OrderDealTwo:
    java.lang.String value -> a
    com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshListView refreshListView -> b
    android.widget.TextView tv_back -> c
    com.zrh.urestaurantprivate.thread.RefreshOrderInfoTask refreshOrderInfoTask -> d
    void onCreate(android.os.Bundle) -> onCreate
    void initRefreshListView() -> a
    void getInfo() -> b
    void executeRefreshOrderTask() -> c
    void onClick(android.view.View) -> onClick
    void access$0(com.zrh.urestaurantprivate.umenu.OrderDealTwo) -> a
    com.zrh.urestaurantprivate.thread.RefreshOrderInfoTask access$1(com.zrh.urestaurantprivate.umenu.OrderDealTwo) -> b
    void access$2(com.zrh.urestaurantprivate.umenu.OrderDealTwo,com.zrh.urestaurantprivate.thread.RefreshOrderInfoTask) -> a
com.zrh.urestaurantprivate.umenu.OrderDealTwo$1 -> com.zrh.urestaurantprivate.umenu.u:
    com.zrh.urestaurantprivate.umenu.OrderDealTwo this$0 -> a
    void onPullDownToRefresh(com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase) -> a
    void onPullUpToRefresh(com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase) -> b
com.zrh.urestaurantprivate.umenu.OrderDealTwo$2 -> com.zrh.urestaurantprivate.umenu.v:
    com.zrh.urestaurantprivate.umenu.OrderDealTwo this$0 -> a
    void run() -> run
com.zrh.urestaurantprivate.umenu.OrderDetails -> com.zrh.urestaurantprivate.umenu.OrderDetails:
    android.widget.GridView gv_menu -> a
    android.widget.TextView tv_back -> b
    com.zrh.urestaurantprivate.bean.OrderInfo detailInfo -> c
    android.widget.ListView lv_order_details -> d
    java.util.List listMenuDetails -> e
    java.lang.String[] detailsString -> f
    void onCreate(android.os.Bundle) -> onCreate
    java.util.List access$0(com.zrh.urestaurantprivate.umenu.OrderDetails) -> a
    java.lang.String[] access$1(com.zrh.urestaurantprivate.umenu.OrderDetails) -> b
    com.zrh.urestaurantprivate.bean.OrderInfo access$2(com.zrh.urestaurantprivate.umenu.OrderDetails) -> c
com.zrh.urestaurantprivate.umenu.OrderDetails$1 -> com.zrh.urestaurantprivate.umenu.w:
    com.zrh.urestaurantprivate.umenu.OrderDetails this$0 -> a
    void onClick(android.view.View) -> onClick
com.zrh.urestaurantprivate.umenu.OrderDetails$2 -> com.zrh.urestaurantprivate.umenu.x:
    com.zrh.urestaurantprivate.umenu.OrderDetails this$0 -> a
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    long getItemId(int) -> getItemId
    java.lang.Object getItem(int) -> getItem
    int getCount() -> getCount
com.zrh.urestaurantprivate.umenu.OrderDetails$3 -> com.zrh.urestaurantprivate.umenu.y:
    com.zrh.urestaurantprivate.umenu.OrderDetails this$0 -> a
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    long getItemId(int) -> getItemId
    java.lang.Object getItem(int) -> getItem
    int getCount() -> getCount
com.zrh.urestaurantprivate.umenu.OrderHistory -> com.zrh.urestaurantprivate.umenu.OrderHistory:
    java.lang.String value -> a
    com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshListView refreshListView -> b
    android.widget.TextView tv_back -> c
    com.zrh.urestaurantprivate.thread.RefreshOrderInfoTask refreshOrderInfoTask -> d
    void onCreate(android.os.Bundle) -> onCreate
    void initRefreshListView() -> a
    void getInfo() -> b
    void executeRefreshOrderTask() -> c
    void onClick(android.view.View) -> onClick
    void access$0(com.zrh.urestaurantprivate.umenu.OrderHistory) -> a
    com.zrh.urestaurantprivate.thread.RefreshOrderInfoTask access$1(com.zrh.urestaurantprivate.umenu.OrderHistory) -> b
    void access$2(com.zrh.urestaurantprivate.umenu.OrderHistory,com.zrh.urestaurantprivate.thread.RefreshOrderInfoTask) -> a
com.zrh.urestaurantprivate.umenu.OrderHistory$1 -> com.zrh.urestaurantprivate.umenu.z:
    com.zrh.urestaurantprivate.umenu.OrderHistory this$0 -> a
    void onPullDownToRefresh(com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase) -> a
    void onPullUpToRefresh(com.zrh.urestaurantprivate.pulltorefresh.PullToRefreshBase) -> b
com.zrh.urestaurantprivate.umenu.OrderHistory$2 -> com.zrh.urestaurantprivate.umenu.aa:
    com.zrh.urestaurantprivate.umenu.OrderHistory this$0 -> a
    void run() -> run
com.zrh.urestaurantprivate.umenu.OrderSureActivity -> com.zrh.urestaurantprivate.umenu.OrderSureActivity:
    com.zrh.urestaurantprivate.adapter.OrdersSureListAdapter ordersSureListAdapter -> a
    com.zrh.urestaurantprivate.umenu.MyApplication application -> b
    android.widget.ListView order_sure_list -> c
    char symbol -> d
    android.widget.TextView total_money -> e
    android.widget.Button order_sure -> f
    com.zrh.urestaurantprivate.bean.Order od -> g
    android.widget.EditText fuwuyuan_id -> h
    android.widget.EditText phone -> i
    android.widget.Toast mToast -> j
    android.widget.EditText beizhu -> k
    android.widget.LinearLayout mLinear -> l
    java.lang.String odjs -> m
    android.app.Dialog mDialog -> n
    com.zrh.urestaurantprivate.umenu.Upagetwo$MyHandler twohandler -> o
    android.widget.TextView tv_back -> p
    com.zrh.urestaurantprivate.util.SharePreferenceUtil sp -> q
    void onCreate(android.os.Bundle) -> onCreate
    void AddDate() -> a
    void onClick(android.view.View) -> onClick
    void showRequestDialog() -> c
    void closeReflashDialog() -> b
    void showToast(android.content.Context,java.lang.String,int) -> a
    com.zrh.urestaurantprivate.util.SharePreferenceUtil access$0(com.zrh.urestaurantprivate.umenu.OrderSureActivity) -> a
    java.lang.String access$1(com.zrh.urestaurantprivate.umenu.OrderSureActivity) -> b
    void access$2(com.zrh.urestaurantprivate.umenu.OrderSureActivity,android.content.Context,java.lang.String,int) -> a
    android.widget.EditText access$3(com.zrh.urestaurantprivate.umenu.OrderSureActivity) -> c
    com.zrh.urestaurantprivate.umenu.Upagetwo$MyHandler access$4(com.zrh.urestaurantprivate.umenu.OrderSureActivity) -> d
    android.widget.ListView access$5(com.zrh.urestaurantprivate.umenu.OrderSureActivity) -> e
    android.widget.LinearLayout access$6(com.zrh.urestaurantprivate.umenu.OrderSureActivity) -> f
com.zrh.urestaurantprivate.umenu.OrderSureActivity$1 -> com.zrh.urestaurantprivate.umenu.ab:
    com.zrh.urestaurantprivate.umenu.OrderSureActivity this$0 -> a
    void onFocusChange(android.view.View,boolean) -> onFocusChange
com.zrh.urestaurantprivate.umenu.OrderSureActivity$2 -> com.zrh.urestaurantprivate.umenu.ac:
    com.zrh.urestaurantprivate.umenu.OrderSureActivity this$0 -> a
    void onFocusChange(android.view.View,boolean) -> onFocusChange
com.zrh.urestaurantprivate.umenu.OrderSureActivity$3 -> com.zrh.urestaurantprivate.umenu.ad:
    com.zrh.urestaurantprivate.umenu.OrderSureActivity this$0 -> a
    void onFocusChange(android.view.View,boolean) -> onFocusChange
com.zrh.urestaurantprivate.umenu.OrderSureActivity$4 -> com.zrh.urestaurantprivate.umenu.ae:
    com.zrh.urestaurantprivate.umenu.OrderSureActivity this$0 -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.zrh.urestaurantprivate.umenu.OrderSureActivity$doUserOrderMenu -> com.zrh.urestaurantprivate.umenu.af:
    org.json.JSONObject appidJson -> b
    int huiyuan_msg -> c
    com.zrh.urestaurantprivate.umenu.OrderSureActivity this$0 -> a
    java.lang.String doInBackground(java.lang.Void[]) -> a
    void onPostExecute(java.lang.String) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.zrh.urestaurantprivate.umenu.R -> com.zrh.urestaurantprivate.umenu.ag:
com.zrh.urestaurantprivate.umenu.R$styleable -> com.zrh.urestaurantprivate.umenu.ah:
    int[] Gallery -> Gallery
    int Gallery_android_galleryItemBackground -> Gallery_android_galleryItemBackground
    int[] PullToRefresh -> PullToRefresh
    int PullToRefresh_ptrAdapterViewBackground -> PullToRefresh_ptrAdapterViewBackground
    int PullToRefresh_ptrAnimationStyle -> PullToRefresh_ptrAnimationStyle
    int PullToRefresh_ptrDrawable -> PullToRefresh_ptrDrawable
    int PullToRefresh_ptrDrawableBottom -> PullToRefresh_ptrDrawableBottom
    int PullToRefresh_ptrDrawableEnd -> PullToRefresh_ptrDrawableEnd
    int PullToRefresh_ptrDrawableStart -> PullToRefresh_ptrDrawableStart
    int PullToRefresh_ptrDrawableTop -> PullToRefresh_ptrDrawableTop
    int PullToRefresh_ptrHeaderBackground -> PullToRefresh_ptrHeaderBackground
    int PullToRefresh_ptrHeaderSubTextColor -> PullToRefresh_ptrHeaderSubTextColor
    int PullToRefresh_ptrHeaderTextAppearance -> PullToRefresh_ptrHeaderTextAppearance
    int PullToRefresh_ptrHeaderTextColor -> PullToRefresh_ptrHeaderTextColor
    int PullToRefresh_ptrListViewExtrasEnabled -> PullToRefresh_ptrListViewExtrasEnabled
    int PullToRefresh_ptrMode -> PullToRefresh_ptrMode
    int PullToRefresh_ptrOverScroll -> PullToRefresh_ptrOverScroll
    int PullToRefresh_ptrRefreshableViewBackground -> PullToRefresh_ptrRefreshableViewBackground
    int PullToRefresh_ptrRotateDrawableWhilePulling -> PullToRefresh_ptrRotateDrawableWhilePulling
    int PullToRefresh_ptrScrollingWhileRefreshingEnabled -> PullToRefresh_ptrScrollingWhileRefreshingEnabled
    int PullToRefresh_ptrShowIndicator -> PullToRefresh_ptrShowIndicator
    int PullToRefresh_ptrSubHeaderTextAppearance -> PullToRefresh_ptrSubHeaderTextAppearance
com.zrh.urestaurantprivate.umenu.TableInfoActivity -> com.zrh.urestaurantprivate.umenu.TableInfoActivity:
    boolean isExit -> a
    android.widget.Toast mToast -> b
    long nowTime -> c
    boolean isUnusedTable -> d
    boolean isHaveApart -> e
    boolean isOrdered -> f
    boolean isOperation -> g
    boolean isMergeTable -> h
    android.app.Dialog mDialog -> i
    android.widget.GridView gv -> j
    android.widget.Button btn_apart -> k
    android.widget.Button btn_meger -> l
    android.widget.Button btn_opera -> m
    android.widget.TextView TVrefresh -> n
    android.widget.TextView TVchoose -> o
    java.util.Map map -> p
    org.json.JSONObject jsonTableInfo -> q
    java.util.List tableList -> r
    java.util.List CheckedTableList -> s
    com.zrh.urestaurantprivate.umenu.TableInfoActivity$MyGridAdapter adapter -> t
    java.lang.String mergeResult -> u
    java.lang.String mergeDescription -> v
    java.lang.String apartResult -> w
    java.lang.String apartDescription -> x
    java.lang.String operaResult -> y
    java.lang.String operaDescription -> z
    java.lang.String cancelResult -> A
    java.lang.String cancelDescription -> B
    long lastClickTime -> C
    android.widget.ImageView img_click_refresh -> D
    int lastClickId -> E
    com.zrh.urestaurantprivate.umenu.MyApplication application -> F
    boolean isApartThreadOver -> G
    boolean isMergeThreadOver -> H
    boolean isOperaThreadOver -> I
    boolean isCancelThreadOver -> J
    com.zrh.urestaurantprivate.umenu.TableInfoActivity$MyHandler menuHandler -> K
    java.lang.StringBuffer sb -> L
    void onCreate(android.os.Bundle) -> onCreate
    com.zrh.urestaurantprivate.umenu.TableInfoActivity$MyHandler getHandler() -> a
    void initTableViewPager() -> j
    void onClick(android.view.View) -> onClick
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long) -> onItemLongClick
    void idChangeToString() -> k
    void deleteData() -> b
    void ApartTable() -> c
    void OperaTable() -> d
    void MergeTable() -> e
    void cancelTable() -> f
    void showRequestDialog(java.lang.String) -> a
    void closeReflashDialog() -> g
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void exitByTwoClick() -> l
    void showToast(android.content.Context,java.lang.String,int) -> a
    boolean detect() -> h
    android.widget.ImageView access$0(com.zrh.urestaurantprivate.umenu.TableInfoActivity) -> a
    void access$1(com.zrh.urestaurantprivate.umenu.TableInfoActivity) -> b
    java.lang.String access$2(com.zrh.urestaurantprivate.umenu.TableInfoActivity) -> c
    java.lang.String access$3(com.zrh.urestaurantprivate.umenu.TableInfoActivity) -> d
    java.lang.String access$4(com.zrh.urestaurantprivate.umenu.TableInfoActivity) -> e
    java.lang.String access$5(com.zrh.urestaurantprivate.umenu.TableInfoActivity) -> f
    java.lang.String access$6(com.zrh.urestaurantprivate.umenu.TableInfoActivity) -> g
    java.lang.String access$7(com.zrh.urestaurantprivate.umenu.TableInfoActivity) -> h
    java.lang.String access$8(com.zrh.urestaurantprivate.umenu.TableInfoActivity) -> i
    java.lang.String access$9(com.zrh.urestaurantprivate.umenu.TableInfoActivity) -> j
    boolean access$10(com.zrh.urestaurantprivate.umenu.TableInfoActivity) -> k
    void access$11(com.zrh.urestaurantprivate.umenu.TableInfoActivity,boolean) -> a
    boolean access$12(com.zrh.urestaurantprivate.umenu.TableInfoActivity) -> l
    void access$13(com.zrh.urestaurantprivate.umenu.TableInfoActivity,boolean) -> b
    boolean access$14(com.zrh.urestaurantprivate.umenu.TableInfoActivity) -> m
    void access$15(com.zrh.urestaurantprivate.umenu.TableInfoActivity,boolean) -> c
    boolean access$16(com.zrh.urestaurantprivate.umenu.TableInfoActivity) -> n
    void access$17(com.zrh.urestaurantprivate.umenu.TableInfoActivity,boolean) -> d
    java.util.List access$18(com.zrh.urestaurantprivate.umenu.TableInfoActivity) -> o
    android.widget.GridView access$19(com.zrh.urestaurantprivate.umenu.TableInfoActivity) -> p
    void access$20(com.zrh.urestaurantprivate.umenu.TableInfoActivity,java.util.Map) -> a
    java.util.Map access$21(com.zrh.urestaurantprivate.umenu.TableInfoActivity) -> q
    void access$22(com.zrh.urestaurantprivate.umenu.TableInfoActivity,java.util.List) -> a
    com.zrh.urestaurantprivate.umenu.TableInfoActivity$MyHandler access$23() -> i
    void access$24(com.zrh.urestaurantprivate.umenu.TableInfoActivity,org.json.JSONObject) -> a
    org.json.JSONObject access$25(com.zrh.urestaurantprivate.umenu.TableInfoActivity) -> r
    com.zrh.urestaurantprivate.umenu.MyApplication access$26(com.zrh.urestaurantprivate.umenu.TableInfoActivity) -> s
    void access$27(com.zrh.urestaurantprivate.umenu.TableInfoActivity) -> t
    java.lang.StringBuffer access$28(com.zrh.urestaurantprivate.umenu.TableInfoActivity) -> u
    void access$29(com.zrh.urestaurantprivate.umenu.TableInfoActivity,java.lang.String) -> a
    void access$30(com.zrh.urestaurantprivate.umenu.TableInfoActivity,java.lang.String) -> b
    void access$31(com.zrh.urestaurantprivate.umenu.TableInfoActivity,java.lang.String) -> c
    void access$32(com.zrh.urestaurantprivate.umenu.TableInfoActivity,java.lang.String) -> d
    void access$33(com.zrh.urestaurantprivate.umenu.TableInfoActivity,java.lang.String) -> e
    void access$34(com.zrh.urestaurantprivate.umenu.TableInfoActivity,java.lang.String) -> f
    void access$35(com.zrh.urestaurantprivate.umenu.TableInfoActivity,java.lang.String) -> g
    void access$36(com.zrh.urestaurantprivate.umenu.TableInfoActivity,java.lang.String) -> h
    void access$37(com.zrh.urestaurantprivate.umenu.TableInfoActivity,java.util.List) -> b
    void access$38(com.zrh.urestaurantprivate.umenu.TableInfoActivity,boolean) -> e
com.zrh.urestaurantprivate.umenu.TableInfoActivity$1 -> com.zrh.urestaurantprivate.umenu.ai:
    com.zrh.urestaurantprivate.umenu.TableInfoActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.zrh.urestaurantprivate.umenu.TableInfoActivity$2 -> com.zrh.urestaurantprivate.umenu.aj:
    com.zrh.urestaurantprivate.umenu.TableInfoActivity this$0 -> a
    void run() -> run
com.zrh.urestaurantprivate.umenu.TableInfoActivity$GetApartInfo -> com.zrh.urestaurantprivate.umenu.ak:
    com.zrh.urestaurantprivate.umenu.TableInfoActivity this$0 -> a
    void run() -> run
com.zrh.urestaurantprivate.umenu.TableInfoActivity$GetFreeTableInfo -> com.zrh.urestaurantprivate.umenu.al:
    com.zrh.urestaurantprivate.umenu.TableInfoActivity this$0 -> a
    void run() -> run
com.zrh.urestaurantprivate.umenu.TableInfoActivity$GetMergeInfo -> com.zrh.urestaurantprivate.umenu.am:
    com.zrh.urestaurantprivate.umenu.TableInfoActivity this$0 -> a
    void run() -> run
com.zrh.urestaurantprivate.umenu.TableInfoActivity$GetOpenTableInfo -> com.zrh.urestaurantprivate.umenu.an:
    com.zrh.urestaurantprivate.umenu.TableInfoActivity this$0 -> a
    void run() -> run
com.zrh.urestaurantprivate.umenu.TableInfoActivity$GetOperaInfo -> com.zrh.urestaurantprivate.umenu.ao:
    com.zrh.urestaurantprivate.umenu.TableInfoActivity this$0 -> a
    void run() -> run
com.zrh.urestaurantprivate.umenu.TableInfoActivity$GetOrderedTableInfo -> com.zrh.urestaurantprivate.umenu.ap:
    com.zrh.urestaurantprivate.umenu.TableInfoActivity this$0 -> a
    void run() -> run
com.zrh.urestaurantprivate.umenu.TableInfoActivity$GetTableInfo -> com.zrh.urestaurantprivate.umenu.aq:
    com.zrh.urestaurantprivate.umenu.TableInfoActivity this$0 -> a
    void run() -> run
com.zrh.urestaurantprivate.umenu.TableInfoActivity$MyGridAdapter -> com.zrh.urestaurantprivate.umenu.ar:
    com.zrh.urestaurantprivate.umenu.TableInfoActivity$MyGridAdapter$ViewHolder holder -> b
    com.zrh.urestaurantprivate.umenu.TableInfoActivity this$0 -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.zrh.urestaurantprivate.umenu.TableInfoActivity$MyGridAdapter$ViewHolder -> com.zrh.urestaurantprivate.umenu.as:
    android.widget.TextView text1 -> a
    android.widget.TextView text2 -> b
    android.widget.TextView text3 -> c
    android.widget.TextView text4 -> d
    android.widget.TextView text5 -> e
    android.widget.TextView text6 -> f
    android.widget.TextView text7 -> g
    android.widget.ImageView image -> h
    com.zrh.urestaurantprivate.umenu.TableInfoActivity$MyGridAdapter this$1 -> i
com.zrh.urestaurantprivate.umenu.TableInfoActivity$MyHandler -> com.zrh.urestaurantprivate.umenu.at:
    com.zrh.urestaurantprivate.umenu.TableInfoActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.zrh.urestaurantprivate.umenu.TableInfoActivity$cancelOperaInfo -> com.zrh.urestaurantprivate.umenu.au:
    com.zrh.urestaurantprivate.umenu.TableInfoActivity this$0 -> a
    void run() -> run
com.zrh.urestaurantprivate.umenu.UMainActivity -> com.zrh.urestaurantprivate.umenu.UMainActivity:
    android.widget.RadioGroup radioGroup -> b
    android.widget.TabHost mHost -> a
    boolean isExit -> c
    android.widget.Toast mToast -> d
    void onCreate(android.os.Bundle) -> onCreate
    android.widget.TabHost getHost() -> a
    android.widget.RadioGroup getButton() -> b
    void onCheckedChanged(android.widget.RadioGroup,int) -> onCheckedChanged
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void exitBy2Click() -> c
    void showToast(android.content.Context,java.lang.String,int) -> a
    void access$0(com.zrh.urestaurantprivate.umenu.UMainActivity,boolean) -> a
com.zrh.urestaurantprivate.umenu.UMainActivity$1 -> com.zrh.urestaurantprivate.umenu.av:
    com.zrh.urestaurantprivate.umenu.UMainActivity this$0 -> a
    void run() -> run
com.zrh.urestaurantprivate.umenu.Upagetwo -> com.zrh.urestaurantprivate.umenu.Upagetwo:
    android.widget.ListView orderListView -> p
    android.widget.Button dcbtn -> q
    android.widget.Button tv_back -> r
    android.widget.TextView totaltv -> s
    android.widget.TextView myordertv -> t
    android.widget.TextView myEmpty -> u
    long lastClickTime -> v
    com.zrh.urestaurantprivate.umenu.MyApplication application -> w
    java.util.List menuCatName -> x
    java.lang.String catId -> y
    java.util.List menulist -> z
    java.util.List menuid -> A
    int o -> B
    int z -> C
    int zz -> D
    com.zrh.urestaurantprivate.umenu.Upagetwo$MyHandler myhandler -> E
    com.zrh.urestaurantprivate.adapter.OrdersListViewAdapter slistItemAdapter -> F
    java.util.List menuCatnamelist -> G
    android.widget.Toast mToast -> H
    java.lang.String menucat -> I
    int select_item -> n
    com.zrh.urestaurantprivate.bean.OrderList orderList -> J
    char symbol -> K
    com.zrh.urestaurantprivate.umenu.Upagetwo instance -> o
    android.widget.HorizontalScrollView mHorizontalScrollView -> L
    android.widget.LinearLayout mLinearLayout -> M
    android.support.v4.view.ViewPager pager -> N
    int mPreSelectItem -> O
    java.util.ArrayList fragments -> P
    com.zrh.urestaurantprivate.umenu.Upagetwo$MyFragmentPagerAdapter fragmentPagerAdapter -> Q
    com.zrh.urestaurantprivate.umenu.BaseFragment fragment -> R
    com.zrh.urestaurantprivate.thread.OrderInfoThread thread -> S
    int nDiscountLimit -> T
    com.zrh.urestaurantprivate.entitydb.RestaurantInfoDB rdb -> U
    int totalMenuWidth -> V
    int moveLength -> W
    float textSizeMin -> X
    float textSizeMax -> Y
    void onCreate(android.os.Bundle) -> onCreate
    void initFoodData() -> j
    void addViewPagerView(java.util.List) -> a
    void addViewPagerViewforOne(java.util.List) -> b
    void addViewPagerViewforTwo(java.util.List) -> c
    void addViewPagerViewforThree(java.util.List) -> d
    com.zrh.urestaurantprivate.umenu.Upagetwo$MyHandler getHandler() -> f
    void onClick(android.view.View) -> onClick
    void getRebateLimit() -> k
    void orderMenu(android.os.Message) -> a
    void deleteOrderMenu(android.os.Message) -> b
    void moveTitleLabel(int) -> a
    void showView() -> l
    void showEmptyInfo() -> m
    void AddDate() -> g
    void orderDinner() -> n
    void showDetailMsg(android.os.Message) -> c
    void noNetLink(android.content.Context) -> a
    boolean isNetworkAvailable() -> o
    void clearData() -> p
    boolean isFastDoubleClick() -> h
    void showToast(android.content.Context,java.lang.String,int) -> a
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void access$0(com.zrh.urestaurantprivate.umenu.Upagetwo,android.os.Message) -> a
    void access$1(com.zrh.urestaurantprivate.umenu.Upagetwo,android.os.Message) -> b
    void access$2(com.zrh.urestaurantprivate.umenu.Upagetwo,android.os.Message) -> c
    void access$3(com.zrh.urestaurantprivate.umenu.Upagetwo) -> a
    com.zrh.urestaurantprivate.thread.OrderInfoThread access$4(com.zrh.urestaurantprivate.umenu.Upagetwo) -> b
    void access$5(com.zrh.urestaurantprivate.umenu.Upagetwo,com.zrh.urestaurantprivate.thread.OrderInfoThread) -> a
    void access$6(com.zrh.urestaurantprivate.umenu.Upagetwo,int) -> a
    java.util.List access$7(com.zrh.urestaurantprivate.umenu.Upagetwo) -> c
    void access$8(com.zrh.urestaurantprivate.umenu.Upagetwo,java.util.List) -> a
    com.zrh.urestaurantprivate.umenu.Upagetwo$MyHandler access$9() -> i
    void access$10(com.zrh.urestaurantprivate.umenu.Upagetwo) -> d
    void access$11(com.zrh.urestaurantprivate.umenu.Upagetwo,android.content.Context,java.lang.String,int) -> a
com.zrh.urestaurantprivate.umenu.Upagetwo$1 -> com.zrh.urestaurantprivate.umenu.aw:
    com.zrh.urestaurantprivate.umenu.Upagetwo this$0 -> a
    void onClick(android.view.View) -> onClick
com.zrh.urestaurantprivate.umenu.Upagetwo$2 -> com.zrh.urestaurantprivate.umenu.ax:
    com.zrh.urestaurantprivate.umenu.Upagetwo this$0 -> a
    void onClick(android.view.View) -> onClick
com.zrh.urestaurantprivate.umenu.Upagetwo$3 -> com.zrh.urestaurantprivate.umenu.ay:
    com.zrh.urestaurantprivate.umenu.Upagetwo this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.zrh.urestaurantprivate.umenu.Upagetwo$4 -> com.zrh.urestaurantprivate.umenu.az:
    com.zrh.urestaurantprivate.umenu.Upagetwo this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.zrh.urestaurantprivate.umenu.Upagetwo$MyFragmentPagerAdapter -> com.zrh.urestaurantprivate.umenu.ba:
    java.util.ArrayList fragments -> b
    android.support.v4.app.FragmentManager fm -> c
    com.zrh.urestaurantprivate.umenu.Upagetwo this$0 -> a
    int getCount() -> b
    android.support.v4.app.Fragment getItem(int) -> a
    int getItemPosition(java.lang.Object) -> a
    void destroyItem(android.view.ViewGroup,int,java.lang.Object) -> a
com.zrh.urestaurantprivate.umenu.Upagetwo$MyHandler -> com.zrh.urestaurantprivate.umenu.bb:
    com.zrh.urestaurantprivate.umenu.Upagetwo this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.zrh.urestaurantprivate.umenu.Upagetwo$MyOnPageChangeListener -> com.zrh.urestaurantprivate.umenu.bc:
    com.zrh.urestaurantprivate.umenu.Upagetwo this$0 -> a
    void onPageSelected(int) -> a
    void onPageScrolled(int,float,int) -> a
    void onPageScrollStateChanged(int) -> b
com.zrh.urestaurantprivate.umenu.WelcomeActivity -> com.zrh.urestaurantprivate.umenu.WelcomeActivity:
    com.zrh.urestaurantprivate.umenu.MyApplication application -> a
    java.lang.Boolean isExit -> b
    void onCreate(android.os.Bundle) -> onCreate
    boolean checkSDCard() -> b
    boolean detect() -> a
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void exitBy2Click() -> c
    void access$0(java.lang.Boolean) -> a
com.zrh.urestaurantprivate.umenu.WelcomeActivity$1 -> com.zrh.urestaurantprivate.umenu.bd:
    com.zrh.urestaurantprivate.umenu.WelcomeActivity this$0 -> a
    void run() -> run
com.zrh.urestaurantprivate.umenu.WelcomeActivity$2 -> com.zrh.urestaurantprivate.umenu.be:
    com.zrh.urestaurantprivate.umenu.WelcomeActivity this$0 -> a
    void run() -> run
com.zrh.urestaurantprivate.umenu.aOrderActivity -> com.zrh.urestaurantprivate.umenu.aOrderActivity:
    boolean isExit -> b
    android.widget.Toast mToast -> c
    android.widget.RelativeLayout rl_ordermanage_prepare -> d
    android.widget.RelativeLayout rl_ordermanage_deal -> e
    android.widget.RelativeLayout rl_ordermanage_exception -> f
    android.widget.RelativeLayout rl_ordermanage_history -> g
    android.widget.RelativeLayout rl_ordermanage_about -> h
    android.widget.RelativeLayout rl_ordermanage_refresh -> i
    org.json.JSONObject jsonObject -> j
    java.lang.String menuString -> k
    com.zrh.urestaurantprivate.util.SharePreferenceUtil sp -> l
    android.app.Dialog mDialog -> m
    android.os.Handler handler -> n
    com.zrh.urestaurantprivate.umenu.MyApplication application -> a
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void exitBy2Click() -> c
    void showToast(android.content.Context,java.lang.String,int) -> a
    boolean detect() -> a
    void showRequestDialog(java.lang.String) -> a
    void closeReflashDialog() -> b
    com.zrh.urestaurantprivate.util.SharePreferenceUtil access$0(com.zrh.urestaurantprivate.umenu.aOrderActivity) -> a
    void access$1(com.zrh.urestaurantprivate.umenu.aOrderActivity,java.lang.String) -> a
    java.lang.String access$2(com.zrh.urestaurantprivate.umenu.aOrderActivity) -> b
    android.os.Handler access$3(com.zrh.urestaurantprivate.umenu.aOrderActivity) -> c
    void access$4(com.zrh.urestaurantprivate.umenu.aOrderActivity,org.json.JSONObject) -> a
    org.json.JSONObject access$5(com.zrh.urestaurantprivate.umenu.aOrderActivity) -> d
    void access$6(com.zrh.urestaurantprivate.umenu.aOrderActivity,boolean) -> a
com.zrh.urestaurantprivate.umenu.aOrderActivity$1 -> com.zrh.urestaurantprivate.umenu.bf:
    com.zrh.urestaurantprivate.umenu.aOrderActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.zrh.urestaurantprivate.umenu.aOrderActivity$2 -> com.zrh.urestaurantprivate.umenu.bg:
    com.zrh.urestaurantprivate.umenu.aOrderActivity this$0 -> a
    void run() -> run
com.zrh.urestaurantprivate.umenu.aOrderActivity$getMenuJson -> com.zrh.urestaurantprivate.umenu.bh:
    com.zrh.urestaurantprivate.umenu.aOrderActivity this$0 -> a
    void run() -> run
com.zrh.urestaurantprivate.util.AvoidTwoClick -> com.zrh.urestaurantprivate.f.a:
    boolean canClick -> a
    void avoidTwoClick() -> a
com.zrh.urestaurantprivate.util.AvoidTwoClick$1 -> com.zrh.urestaurantprivate.f.b:
    void run() -> run
com.zrh.urestaurantprivate.util.ChoiceDialog -> com.zrh.urestaurantprivate.f.c:
    com.zrh.urestaurantprivate.umenu.MyApplication application -> b
    android.widget.TextView choice_a -> c
    android.widget.TextView choice_b -> d
    android.widget.Toast mToast -> e
    android.content.Context context -> a
    void onCreate(android.os.Bundle) -> onCreate
    void initView() -> a
    void onClick(android.view.View) -> onClick
    void onBackPressed() -> onBackPressed
    void showToast(android.content.Context,java.lang.String,int) -> a
com.zrh.urestaurantprivate.util.CrashHandler -> com.zrh.urestaurantprivate.f.d:
    java.lang.Thread$UncaughtExceptionHandler mDefaultHandler -> a
    com.zrh.urestaurantprivate.util.CrashHandler INSTANCE -> b
    android.content.Context mContext -> c
    java.util.Map info -> d
    java.text.SimpleDateFormat format -> e
    com.zrh.urestaurantprivate.util.CrashHandler getInstance() -> a
    void init(android.content.Context) -> a
    void uncaughtException(java.lang.Thread,java.lang.Throwable) -> uncaughtException
    boolean handleException(java.lang.Throwable) -> a
    void collectDeviceInfo(android.content.Context) -> b
    java.lang.String saveCrashInfo2File(java.lang.Throwable) -> b
    android.content.Context access$0(com.zrh.urestaurantprivate.util.CrashHandler) -> a
com.zrh.urestaurantprivate.util.CrashHandler$1 -> com.zrh.urestaurantprivate.f.e:
    com.zrh.urestaurantprivate.util.CrashHandler this$0 -> a
    void run() -> run
com.zrh.urestaurantprivate.util.CreateSdcardDir -> com.zrh.urestaurantprivate.f.f:
    void createSDCardDir() -> a
com.zrh.urestaurantprivate.util.DialogFactory -> com.zrh.urestaurantprivate.f.g:
    android.app.Dialog creatRequestDialog(android.content.Context,java.lang.String) -> a
    void ToastDialog(android.content.Context,java.lang.String,java.lang.String) -> a
com.zrh.urestaurantprivate.util.SharePreferenceUtil -> com.zrh.urestaurantprivate.f.h:
    android.content.SharedPreferences sp -> a
    android.content.SharedPreferences$Editor editor -> b
    void setIsFirst(boolean) -> a
    boolean getIsFirst() -> a
    int getMenuChange() -> b
    void setIsonline(boolean) -> b
    void setAppID(java.lang.String) -> a
    java.lang.String getAppID() -> c
com.zrh.urestaurantprivate.util.Utils -> com.zrh.urestaurantprivate.f.i:
    int getScreenWidth(android.content.Context) -> a
com.zrh.urestaurantprivate.view.MenuCategoryTextView -> com.zrh.urestaurantprivate.view.MenuCategoryTextView:
    boolean isVerticalLine -> a
    boolean isHorizontaline -> b
    int verticalLineColor -> c
    int horizontalineColor -> d
    float screen_density -> e
    void init(android.content.Context) -> a
    void setIsHorizontaline(boolean) -> setIsHorizontaline
    void setIsVerticalLine(boolean) -> setIsVerticalLine
    void setHorizontalineColor(int) -> setHorizontalineColor
    void setVerticalLineColor(int) -> setVerticalLineColor
    void dispatchDraw(android.graphics.Canvas) -> dispatchDraw
    void onDraw(android.graphics.Canvas) -> onDraw
